{"question":"How does the Android Push Notification Flow work using FCM?","answer":"The push notification flow using Firebase Cloud Messaging (FCM) in Android involves several steps: 1. The app registers with FCM to obtain a unique registration token using `FirebaseMessaging.getInstance().token`. 2. The token is sent to the app’s server to associate it with the user or device. 3. The server sends a notification or data message to FCM’s servers using the token. 4. FCM routes the message to Google Play Services on the device. 5. The app’s `FirebaseMessagingService` processes the message: notification payloads display a system notification automatically; data payloads are handled in `onMessageReceived()`. 6. Notifications trigger UI updates or launch Activities via `PendingIntent`. The system supports foreground/background notifications, with Doze mode optimizations for battery life.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is an inline function in Kotlin?","answer":"An inline function in Kotlin, marked with `inline`, has its code copied to the call site, reducing function call overhead, especially for lambdas. Example: `inline fun performAction(action: () -> Unit) { action() }`. It’s used in Android for performance optimization but increases compiled code size, so it’s best for small functions or those with lambdas.","difficulty":"medium","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the advantage of using const in Kotlin?","answer":"The `const` keyword defines compile-time constants, improving performance by avoiding runtime overhead. It’s used with `val` for top-level or `companion object` properties, initialized with constants (e.g., `const String val NAME = "App"`).","difficulty":"easy","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the reified keyword in Kotlin?","answer":"The `reified` keyword, used with `inline` functions, preserves generic type information at runtime, enabling type checks or casts (e.g., `T::class`). Example: `inline fun <reified T> checkType(item: Any) = item is T`. Useful in Android for type-safe operations.","difficulty":"medium","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"Suspending vs Blocking in Kotlin Coroutines","answer":"Suspending functions (`suspend`) pause coroutines without blocking threads, using continuations to resume (e.g., `delay(1000)`). Blocking functions (e.g., `Thread.sleep(1000)`) halt the thread. Suspending is efficient for Android’s non-blocking UI tasks.","difficulty":"medium","topic":"Kotlin Coroutines","role":"Mobile App Developer (Android, iOS)"}
{"question":"Launch vs Async in Kotlin Coroutines","answer":"`launch` starts coroutines for side effects, returning a `Job` (e.g., `launch { delay(1000); println("Done") }`). `async` returns a `Deferred<T>`, awaiting results (e.g., `async { 42 }.await()`). Use `launch` for UI updates, `async` for parallel computations in Android.","difficulty":"medium","topic":"Kotlin Coroutines","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the internal visibility modifier in Kotlin?","answer":"The `internal` modifier restricts access to the same module. Example: `internal class MyClass { internal fun doSomething() {}}`. In Android, it exposes components within the app module, hiding them from external libraries.","difficulty":"easy","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the open keyword in Kotlin?","answer":"The `open` keyword allows inheritance or overriding, as Kotlin classes/functions are `final` by default. Example: `open class Base { open fun doSomething() {}}`. Used in Android for extensible base classes like Activities.","difficulty":"easy","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the difference between lateinit and lazy in Kotlin?","answer":"`lateinit` delays `var` initialization, used in Android lifecycles (e.g., `lateinit var view: View`). It’s not thread-safe. `lazy` initializes `val` on first access, thread-safe (e.g., `val data by lazy { "Init" }`). Use `lateinit` for mutable, `lazy` for immutable properties.","difficulty":"medium","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is Multidex in Android?","answer":"Multidex splits an app’s bytecode into multiple DEX files to exceed the 65,536 method limit. Enable with `multiDexEnabled true` in `build.gradle`. For API < 21, use `MultiDexApplication` or `MultiDex.install()`. Optimize with ProGuard/R8 to reduce overhead in Android.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"How does Kotlin Multiplatform work?","answer":"Kotlin Multiplatform (KMP) shares code (e.g., logic, models) across Android, iOS, etc., using common modules and `expect`/`actual` for platform-specific code. It compiles to JVM bytecode (Android) or native binaries (iOS), integrating with native UI. Reduces duplication in mobile apps.","difficulty":"hard","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a ViewModel and how is it useful?","answer":"A ViewModel (Jetpack) stores UI data, surviving configuration changes, in MVVM. It separates logic from UI, is testable, and uses `LiveData`/`StateFlow`. Example: `class MyViewModel : ViewModel() { val data = MutableLiveData<String>() }`. Enhances Android app stability.","difficulty":"medium","topic":"Android Architecture","role":"Mobile App Developer (Android, iOS)"}
{"question":"Is it possible to force Garbage Collection in Android?","answer":"Yes, `System.gc()` suggests garbage collection, but it’s not guaranteed. It’s discouraged due to performance overhead. Optimize memory with LeakCanary, bitmap recycling, and avoiding leaks in Android.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the @JvmStatic annotation in Kotlin?","answer":"`@JvmStatic` makes `companion object` members static in Java. Example: `class MyClass { companion object { @JvmStatic fun call() = "Hi" }}`. In Java: `MyClass.call()`. Useful for Android Java-Kotlin interop.","difficulty":"medium","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is an init block in Kotlin?","answer":"An `init` block runs after the primary constructor for initialization. Example: `class MyClass(val name: String) { init { println(name) }}`. In Android, it sets up properties or validates parameters.","difficulty":"easy","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the @JvmField annotation in Kotlin?","answer":"`@JvmField` exposes a Kotlin property as a Java field, skipping getters/setters. Example: `class MyClass { @JvmField var field = "42" }`. In Java: `myClass.field`. Used in Android for Java library compatibility.","difficulty":"medium","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the singleTask launchMode in Android?","answer":"`singleTask` ensures one Activity instance in a new task. If it exists, `onNewIntent()` is called; else, a new instance starts. Example: `<activity android:launchMode="singleTask" />`. Used for home screens in Android.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the difference between == and === in Kotlin?","answer":"`==` checks structural equality (`equals()`); `===` checks referential equality (same object). Example: `val a = "Hi"; val b = "Hi"; a == b // true; a === b // false`. In Android, `==` for strings, `===` for caching.","difficulty":"easy","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the @JvmOverloads annotation in Kotlin?","answer":"`@JvmOverloads` generates overloaded methods for default parameters in Java. Example: `@JvmOverloads fun greet(name: String, msg: String = "Hi")`. Creates `greet(String)` and `greet(String, String)`. Useful for Android Java interop.","difficulty":"medium","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"Why use only the default constructor for a Fragment?","answer":"The default constructor is required because Android recreates Fragments (e.g., on rotation) using it. Pass data via `setArguments()` for persistence. Example: `fragment.arguments = Bundle().apply { putString("key", "value") }`. Ensures Android Fragment stability.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"Why call setContentView() in onCreate() of an Activity?","answer":"`setContentView()` inflates the UI layout in `onCreate()` to prepare the Activity’s UI before visibility. Example: `setContentView(R.layout.activity_main)`. Without it, the Activity shows a blank screen in Android.","difficulty":"easy","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"When is onDestroy() called without onPause() and onStop()?","answer":"`onDestroy()` is called without `onPause()`/`onStop()` if `finish()` is called in `onCreate()` or after process death and immediate destruction. Example: `override fun onCreate() { finish() }`. Rare in Android, avoid relying on it.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"When is the lateinit keyword used in Kotlin?","answer":"`lateinit` is used for `var` properties initialized after declaration, common in Android lifecycles (e.g., `lateinit var view: View` in `onCreate()`). Not thread-safe, throws if uninitialized.","difficulty":"medium","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What are companion objects in Kotlin?","answer":"Companion objects define class-level members, like Java `static`. Example: `class MyClass { companion object { fun create() = MyClass() }}`. In Android, used for factory methods or constants.","difficulty":"easy","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a data class in Kotlin?","answer":"A `data class` auto-generates `equals()`, `hashCode()`, `toString()`, `copy()`, and destructuring. Example: `data class User(val name: String, val age: Int)`. Ideal for Android data models.","difficulty":"easy","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What are higher-order functions in Kotlin?","answer":"Higher-order functions take or return functions. Example: `fun process(list: List<Int>, action: (Int) -> Int) = list.map(action)`. In Android, used for collection operations like `map` or `filter`.","difficulty":"medium","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What are lambdas in Kotlin?","answer":"Lambdas are anonymous functions, passed as arguments. Example: `{ x, y -> x + y }`. In Android, used with higher-order functions for concise data processing.","difficulty":"medium","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the difference between val and var in Kotlin?","answer":"`val` is immutable (no reassignment); `var` is mutable. Example: `val a = 1; var b = 2; b = 3` (valid), `a = 4` (invalid). Used in Android for safe data handling.","difficulty":"easy","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"How to check if a lateinit variable is initialized?","answer":"Use `::variable.isInitialized`. Example: `lateinit var name: String; if (::name.isInitialized) println(name)`. Prevents crashes in Android when accessing `lateinit` properties.","difficulty":"medium","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"How to do lazy initialization in Kotlin?","answer":"Use `lazy` for `val` properties, initializing on first access. Thread-safe. Example: `val data: String by lazy { "Init" }`. In Android, ideal for expensive computations.","difficulty":"medium","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What are visibility modifiers in Kotlin?","answer":"Modifiers: `public` (default, everywhere), `private` (class/file), `protected` (class/subclasses), `internal` (module). Example: `private fun secret()`. Controls access in Android.","difficulty":"easy","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the equivalent of Java static methods in Kotlin?","answer":"Use `companion object` members, optionally with `@JvmStatic`. Example: `class MyClass { companion object { fun call() = "Hi" }}`. In Android, mimics Java `static` for utilities.","difficulty":"easy","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"How to create a Singleton in Kotlin?","answer":"Use `object`. Example: `object Singleton { fun doSomething() {} }`. Ensures one instance, used in Android for global state like API clients.","difficulty":"easy","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the difference between open and public in Kotlin?","answer":"`public` (default) allows access everywhere; `open` permits inheritance/overriding. Example: `open class Base { open fun f() {} }`. In Android, `open` is for extensible classes.","difficulty":"easy","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What are the use cases of let, run, with, also, apply in Kotlin?","answer":"Scope functions: `let` (non-null block, returns result), `run` (object block, returns result), `with` (receiver, returns result), `also` (side effects, returns object), `apply` (configures, returns object). In Android, used for concise object handling.","difficulty":"medium","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"How to choose between apply and with in Kotlin?","answer":"Use `apply` to configure and return the object (e.g., `view.apply { text = "Hi" }`). Use `with` for operations returning a result (e.g., `with(view) { text = "Hi"; length }`). In Android, `apply` is common for UI setup.","difficulty":"medium","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the difference between List and Array in Kotlin?","answer":"`List` is a flexible, ordered collection (mutable/immutable); `Array` is fixed-size, mutable, efficient for primitives. Example: `listOf(1, 2)` vs `arrayOf(1, 2)`. In Android, `List` for dynamic data, `Array` for fixed sets.","difficulty":"medium","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What are labels in Kotlin?","answer":"Labels control flow in loops or lambda returns. Example: `loop@ for (i in 1..10) { break@loop }`. In Android, used for complex control in nested operations.","difficulty":"medium","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{"question":"What are coroutines in Kotlin?","answer":"Coroutines handle asynchronous tasks with `suspend` functions and builders like `launch`. Example: `suspend fun fetch() { delay(1000) }`. In Android, simplifies network calls without blocking UI.","difficulty":"medium","topic":"Kotlin Coroutines","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a Coroutine Scope?","answer":"`CoroutineScope` manages coroutine lifecycles, tied to contexts (e.g., UI). Example: `lifecycleScope.launch {}`. In Android, ensures coroutines cancel with component destruction.","difficulty":"medium","topic":"Kotlin Coroutines","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a Coroutine Context?","answer":"`CoroutineContext` defines coroutine behavior (dispatcher, job, exception handler). Example: `Dispatchers.Main`. In Android, controls where and how coroutines run.","difficulty":"medium","topic":"Kotlin Coroutines","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the difference between Thread.sleep() and delay() in Kotlin?","answer":"`Thread.sleep()` blocks the thread; `delay()` suspends coroutines non-blocking. Example: `delay(1000)` in `launch`. In Android, `delay()` keeps UI responsive.","difficulty":"medium","topic":"Kotlin Coroutines","role":"Mobile App Developer (Android, iOS)"}
{"question":"Why does an Android app lag?","answer":"Lags due to main thread overload, memory leaks, complex layouts, frequent GC, or slow network. Optimize with background tasks (Coroutines), profiling, and simplified UI.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is Context in Android and how is it used?","answer":"`Context` accesses app resources/services (e.g., strings, Activities). Example: `context.getString(R.string.name)`. In Android, used in UI components and system interactions.","difficulty":"easy","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What are the Android application components?","answer":"Components: Activities (UI), Services (background), BroadcastReceivers (events), ContentProviders (data sharing). Example: `<activity>` in manifest.","difficulty":"easy","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the project structure of an Android application?","answer":"Structure: `app/src/main/java` (code), `app/src/main/res` (resources), `AndroidManifest.xml` (config), `build.gradle` (build). Organizes Android app development.","difficulty":"easy","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is AndroidManifest.xml?","answer":"`AndroidManifest.xml` declares app components, permissions, SDK versions. Example: `<activity android:name=".MainActivity" />`. Essential for Android app configuration.","difficulty":"easy","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the Application class in Android?","answer":"`Application` is a singleton for app-wide state. Example: `class MyApp : Application() { override fun onCreate() {}}`. In Android, used for initialization.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is an Activity and its lifecycle?","answer":"An Activity is a UI screen. Lifecycle: `onCreate()`, `onStart()`, `onResume()`, `onPause()`, `onStop()`, `onDestroy()`, `onRestart()`. Manages visibility/state in Android.","difficulty":"easy","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the difference between onCreate() and onStart()?","answer":"`onCreate()` initializes (e.g., `setContentView()`); `onStart()` makes Activity visible. Called after `onCreate()` or `onRestart()` in Android.","difficulty":"easy","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What are onSaveInstanceState() and onRestoreInstanceState() in an Activity?","answer":"`onSaveInstanceState()` saves state to `Bundle` (e.g., rotation). `onRestoreInstanceState()` restores it. Example: `outState.putString("key", data)`. Preserves Android UI state.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a Fragment and its lifecycle?","answer":"A Fragment is a modular UI component. Lifecycle: `onAttach()`, `onCreate()`, `onCreateView()`, `onViewCreated()`, `onStart()`, `onResume()`, `onPause()`, `onStop()`, `onDestroyView()`, `onDestroy()`, `onDetach()`. Used for flexible Android UI.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What are launchModes in Android?","answer":"`launchModes`: `standard` (new instance), `singleTop` (reuse top), `singleTask` (single instance, new task), `singleInstance` (single instance, separate task). Set in manifest.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the difference between a Fragment and an Activity?","answer":"Activity is a full UI screen; Fragment is a reusable UI part within an Activity. Fragments enable modular layouts in Android.","difficulty":"easy","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"When should you use a Fragment rather than an Activity?","answer":"Use Fragments for reusable UI or multi-pane layouts (e.g., tablets, ViewPager). Simplifies complex UI within one Activity in Android.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the difference between FragmentPagerAdapter and FragmentStatePagerAdapter?","answer":"`FragmentPagerAdapter` keeps Fragments in memory; `FragmentStatePagerAdapter` destroys them, saving state. Use latter for large datasets in Android.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the difference between adding and replacing a Fragment in the backstack?","answer":"`Adding` stacks a Fragment; `replacing` removes the current one and adds a new one. Both support back navigation in Android.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"How do you communicate between two Fragments?","answer":"Use shared ViewModel, interfaces via Activity, or event bus. Preferred: `ViewModelProvider(activity).get(MyViewModel::class.java)`. Ensures data sharing in Android.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a retained Fragment?","answer":"A retained Fragment (`setRetainInstance(true)`) survives configuration changes, preserving data (not UI). Useful for Android data persistence.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the purpose of addToBackStack() in Fragment transactions?","answer":"`addToBackStack()` saves Fragment transactions for back navigation. Example: `fragmentManager.beginTransaction().replace(R.id.container, fragment).addToBackStack(null).commit()`. Enables Android UI navigation.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a View in Android?","answer":"A View is a UI element (e.g., `Button`, `TextView`) handling drawing and interaction. Base class for Android UI components.","difficulty":"easy","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the difference between View.GONE and View.INVISIBLE?","answer":"`View.GONE` hides and removes space; `View.INVISIBLE` hides but keeps space. Example: `view.visibility = View.GONE`. Impacts Android layouts.","difficulty":"easy","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"How do you create a custom View in Android?","answer":"Extend `View`, override `onDraw()` for rendering, `onMeasure()` for sizing, define XML attributes. Example: `class MyView(context: Context) : View(context) { override fun onDraw(canvas: Canvas) {}}`. For unique Android UI.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What are ViewGroups and how are they different from Views?","answer":"ViewGroups (e.g., `LinearLayout`) are containers managing child Views/ViewGroups; Views are single UI elements. ViewGroups organize Android layouts.","difficulty":"easy","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a Canvas in Android?","answer":"Canvas is a drawing API in `onDraw()` for custom graphics. Example: `canvas.drawRect()`. Used for Android custom UI rendering.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a SurfaceView in Android?","answer":"SurfaceView provides a separate rendering surface, threaded independently. Example: `<SurfaceView>` for games, camera previews in Android.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the difference between ListView and RecyclerView?","answer":"ListView is older, less efficient; RecyclerView uses view recycling, flexible layouts (`LayoutManager`). Preferred for Android scrolling lists.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"How does RecyclerView work?","answer":"RecyclerView recycles views using `Adapter` (data), `ViewHolder` (caches), `LayoutManager` (positions). Example: `recyclerView.layoutManager = LinearLayoutManager(context)`. Optimizes Android lists.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What are the components of a RecyclerView?","answer":"Components: `Adapter` (binds data), `ViewHolder` (caches views), `LayoutManager` (e.g., `LinearLayoutManager`), `ItemAnimator` (animations). Efficient for Android lists.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a LayoutManager in RecyclerView?","answer":"LayoutManager positions items (e.g., `LinearLayoutManager`, `GridLayoutManager`). Example: `recyclerView.layoutManager = LinearLayoutManager(context)`. Controls Android RecyclerView layout.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"How do you handle multiple view types in a RecyclerView?","answer":"Override `getItemViewType()`, inflate layouts in `onCreateViewHolder()`, bind in `onBindViewHolder()`. Example: `override fun getItemViewType(position: Int) = if (data[position].isHeader) 0 else 1`. For varied Android lists.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is DiffUtil and how does it improve RecyclerView performance?","answer":"DiffUtil calculates list differences, updating only changed items. Example: `DiffUtil.calculateDiff(MyDiffCallback(old, new)).dispatchUpdatesTo(adapter)`. Enhances Android RecyclerView efficiency.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the purpose of RecyclerView.setHasFixedSize(true)?","answer":"`setHasFixedSize(true)` skips layout recalculations for fixed-size lists, improving performance. Example: `recyclerView.setHasFixedSize(true)`. Optimizes Android RecyclerView.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"How do you update a specific item in RecyclerView?","answer":"Update data, call `notifyItemChanged(position)` or use `DiffUtil`. Example: `adapter.notifyItemChanged(1)`. Refreshes specific Android RecyclerView items.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is SnapHelper in Android?","answer":"SnapHelper snaps items after scrolling (e.g., centering). Example: `LinearSnapHelper().attachToRecyclerView(recyclerView)`. Used for Android carousel layouts.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a Dialog in Android?","answer":"A Dialog is a small interactive window. Example: `AlertDialog.Builder(context).setMessage("Hi").show()`. Used for Android user prompts.","difficulty":"easy","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a Toast in Android?","answer":"A Toast is a temporary popup for feedback. Example: `Toast.makeText(context, "Saved", Toast.LENGTH_SHORT).show()`. Non-interactive in Android.","difficulty":"easy","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the difference between Dialog and DialogFragment?","answer":"Dialog is a simple window; DialogFragment is a Fragment managing a dialog, handling lifecycle better. Preferred for Android configuration changes.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is an Intent in Android?","answer":"An Intent requests actions (e.g., start Activity, send broadcast). Example: `startActivity(Intent(context, SecondActivity::class.java))`. Enables Android navigation/communication.","difficulty":"easy","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is an implicit Intent?","answer":"Implicit Intent specifies an action without a target, letting the system choose. Example: `Intent(Intent.ACTION_SEND).putExtra(Intent.EXTRA_TEXT, "Hi")`. For Android sharing.","difficulty":"easy","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is an explicit Intent?","answer":"Explicit Intent targets a specific component. Example: `Intent(context, SecondActivity::class.java)`. Used for Android internal navigation.","difficulty":"easy","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a BroadcastReceiver in Android?","answer":"BroadcastReceiver listens for system/app broadcasts. Example: `class MyReceiver : BroadcastReceiver() { override fun onReceive(context: Context, intent: Intent) {}}`. Handles Android events.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a Sticky Intent?","answer":"Sticky Intent persists after broadcast (e.g., `ACTION_BATTERY_CHANGED`). Deprecated, used for system state in Android.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"How do broadcasts and Intents pass messages in an Android app?","answer":"Broadcasts send Intents via `sendBroadcast()`; `BroadcastReceiver` handles them with `registerReceiver()`. Example: `sendBroadcast(Intent("my.action"))`. For Android decoupled communication.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a PendingIntent?","answer":"PendingIntent wraps an Intent for later execution by others. Example: `PendingIntent.getActivity(context, 0, intent, 0)`. Used in Android notifications/alarms.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What are the types of broadcasts in Android?","answer":"Types: normal (simultaneous), ordered (sequential), sticky (persists, deprecated), local (app-internal). Example: `LocalBroadcastManager`. For Android messaging.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a Service in Android?","answer":"Service performs background tasks without UI. Example: `class MyService : Service() { override fun onBind(intent: Intent): IBinder? = null }`. Runs on main thread in Android.","difficulty":"easy","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"On which thread does a Service run in Android?","answer":"Service runs on the main thread. Use worker threads (e.g., Coroutines) for long tasks. Example: `lifecycleScope.launch {}`. Prevents Android UI blocking.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a Foreground Service?","answer":"Foreground Service runs with a notification, less likely to be killed. Example: `startForeground(1, notification)`. For Android music playback.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a JobScheduler?","answer":"JobScheduler schedules background tasks under conditions (e.g., Wi-Fi). Example: `JobScheduler.schedule(JobInfo.Builder(1, ComponentName(context, MyJobService::class.java))`. Saves Android battery.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"How can two Android apps interact?","answer":"Apps interact via Intents (sharing), ContentProviders (data), or AIDL (IPC). Example: `startActivity(Intent(Intent.ACTION_VIEW, Uri.parse("content://contacts/people")))`. Enables Android communication.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"Can an Android app run in multiple processes?","answer":"Yes, use `android:process` in manifest. Example: `<activity android:process=":myProcess" />`. Separates memory spaces in Android apps.","difficulty":"hard","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is AIDL and how to create a bound service with it?","answer":"AIDL enables IPC. Steps: 1) Define `.aidl` interface. 2) Implement service with `Binder`. 3) Bind client with `bindService()`. 4) Communicate via AIDL. Used for Android inter-app services.","difficulty":"hard","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What are the options for background processing in Android?","answer":"Options: Services (long tasks), WorkManager (deferrable), JobScheduler (conditional), Coroutines (async). Example: `WorkManager.getInstance(context).enqueue(workRequest)`. For Android tasks.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a ContentProvider and its typical use?","answer":"ContentProvider manages data access, enabling sharing. Example: `ContentResolver.query()` for contacts. Used for secure Android data sharing.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"How to run parallel tasks with a callback when all complete?","answer":"Use Coroutines with `async` and `awaitAll()`. Example: `coroutineScope { listOf(async { t1 }, async { t2 }).awaitAll() }`. Or use WorkManager for chained tasks in Android.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is ANR and how to prevent it?","answer":"ANR (Application Not Responding) occurs when the main thread is blocked (>5s). Prevent with background tasks (Coroutines, WorkManager), optimized UI. Example: `lifecycleScope.launch {}`.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is AsyncTask (deprecated)?","answer":"AsyncTask (deprecated in API 30) ran background tasks with UI updates. Replaced by Coroutines/WorkManager due to leaks. Example: `AsyncTask.execute { doInBackground() }`.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the difference between Runnable and Thread in Android?","answer":"Runnable defines a task (`run()`); Thread executes it separately. Example: `Thread(Runnable { println("Task") }).start()`. For Android multithreading.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"How do you handle bitmaps in Android to avoid memory issues?","answer":"Use `BitmapFactory.Options(inSampleSize)`, recycle with `bitmap.recycle()`, or libraries like Glide. Example: `options.inSampleSize = 2`. Reduces Android memory usage.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a Bitmap pool?","answer":"Bitmap pool reuses Bitmap objects, reducing allocations/GC. Libraries like Glide manage it. Example: `Glide.with(context).load().into(imageView)`. Optimizes Android memory.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What are the ways to store data in an Android app?","answer":"Storage: SharedPreferences (key-value), Room (database), Files, DataStore (modern key-value), ContentProvider (sharing). Example: `context.getSharedPreferences("prefs", 0)`.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the difference between commit() and apply() in SharedPreferences?","answer":"`commit()` writes synchronously, returns success; `apply()` writes asynchronously, faster. Example: `prefs.edit().putString("key", "value").apply()`. Use `apply()` in Android.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is a SpannableString in Android?","answer":"SpannableString styles text (e.g., color, bold). Example: `SpannableString("Hello").setSpan("ForegroundColorSpan(Color.RED), 0, 5, 0)". Used in Android `TextView` for rich text.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the onTrimMemory() method in Android?","answer":"onTrimMemory() notifies apps to release memory at levels (e.g., TRIM_MEMORY_UI_HIDDEN). Example: `override fun onTrimMemory() { level: Int) { clearCache() }. Manages Android memory.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What are Doze and App Standby in Android?","answer":"Doze restricts background tasks when idle; App Standby defers unused apps’ tasks. Example: `Use JobScheduler for compliance. Saves Android battery life.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is overdraw in Android?","answer":"Overdraw occurs when pixels are redrawn per frame. Reduce with fewer overlapping UI elements, use Profiler. Example: Simplify Android layouts. Improves performance.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"How do you support different screen resolutions in Android?","answer":"Use `dp`/`sp` units`, ` resource qualifiers (e.g., `layout-sw600dp`), ConstraintLayout, test on devices. Example: `<dimen name="size">10dp</dimen>`. Ensures Android UI across screens.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the Android NDK and why is it useful?","answer":"NDK enables C/C++ for high-performance tasks (e.g., games). Example: `externalNativeBuild { cmake { path "CMakeLists.txt" } }`. Boosts Android app speed.","difficulty":"hard","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is RenderScript?","answer":"RenderScript accelerates computations (e.g., image processing) on CPU/GPU. Example: `RenderScript.create(context).applyScript()`. Optimizes parallel tasks.","difficulty":"hard","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is Android Runtime (ART)?","answer":"ART executes apps with AOT bytecode, replacing Dalvik. Example: `.dex` files compile to native code. Improves Android performance and battery.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What are the differences between Dalvik and ART?","answer":"Dalvik uses JIT (runtime compilation); ART uses AOT (install-time), faster. Example: `ART compiles `.dex` to native code at install. Enhances Android apps.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is DEX in Android?","answer":"DEX (Dalvik Executable) is bytecode for Dalvik/ART. Example: `.dex` in APK. Enables Android app execution.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is Android Jetpack and why use it?","answer":"Jetpack offers libraries (e.g., ViewModel, Room) for best practices, compatibility. Example: `implementation "androidx.room:room-runtime:2.4.0"`. Simplifies Android development.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is LiveData in Android?","answer":"LiveData is lifecycle-aware, notifying observers of data changes. Example: `MutableLiveData<String>().observe(owner, { data -> }). Used in Android MVVM.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"What is the difference between setValue() and postValue() in LiveData?","answer":"setValue() updates on main thread; `postValue() posts from background. Example: `liveData.postValue("data")`. Ensures Android thread-safe updates.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question":"How do you share a ViewModel between Fragments?","answer":"Use Activity scope: `ViewModelProvider(activity).get(MyViewModel::class.java)`. Example: `Shared ViewModel` for Fragments. Ensures consistent data in Android.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is the difference between Serializable and Parcelable? Which is better?","answer":"Serializable uses reflection, slower; Parcelable is Android-specific, faster with manual serialization. Example: `data class Data : Parcelable`. Parcelable is preferred for Android.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{
"question":"Why use Bundle instead of Map for data passing?","answer":"Bundle is optimized for Android IPC with Parcelable/Serializable support; Map isn’t suitable for system-level transfers. Example: `intent.putExtra("key", bundle). Ensures efficient Android data transfer.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
}
{
"question":"How to troubleshoot a crashing Android application?","answer":"Check Logcat stack trace, use Android Studio debugger, review changes, test on devices. Example: `adb logcat | grep "Exception"`. Pinpoints Android crash causes.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{
"question":"Why use Dependency Injection libraries like Dagger?","answer":"Dagger decouples code, improves testability, reduces boilerplate. Example: `@Inject lateinit var repo: Repository`. Enhances Android modularity.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{
"question":"How does Dagger work?","answer":"Dagger generates DI code at compile-time with `@Inject`, `@Module`, `@Component`. Example: `@Component interface AppComponent`. Manages Android dependency graphs.","difficulty":"hard","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{
"question":"How to choose between Dagger 2 and Hilt?","answer":"Dagger 2 for complex control; Hilt for simpler setup with Android components. Example: `@HiltAndroidApp`. Hilt reduces Android DI boilerplate.","difficulty":"hard","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is a Component in Dagger?","answer":"Component is an interface linking `@Module` and `@Inject`. Example: `@Component interface AppComponent { fun inject(activity: MainActivity) }`. Defines Android DI injection points.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is a Module in Dagger?","answer":"Module provides dependencies via `@Provides`. Example: `@Module class AppModule { @Provides fun provideRepo() = Repository() }`. For Android non-injectable objects.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is a Multipart Request in Android networking?","answer":"Multipart Request sends mixed data (text, files) in one HTTP request, for uploads. Example: `Retrofit @Multipart @POST("upload")`. Common in Android file transfers.","difficulty":"medium","topic":"Android","role":"Networking"}
{
"question":"What is Flow in Kotlin?","answer":"Flow is a reactive stream for asynchronous data, emitting multiple values. Example: `flow { emit(1) }.collect {}`. Used with Android Coroutines.","difficulty":"medium","topic":"Kotlin Coroutines","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is RxJava?","answer":"RxJava handles asynchronous streams with `Observable`, operators like `map`, `flatMap`. Example: `Observable.just(1).subscribe()`. Used for Android networking/UI.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What are the types of Observables in RxJava?","answer":"Types: `Observable` (multiple values), `Single` (one value/error), `Completable` (no value), `Maybe` (one or none), `Flowable` (backpressure). Example: `Single.just(1)`. For Android async tasks.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is MVVM architecture?","answer":"MVVM: Model (data), View (UI), ViewModel (logic, UI binding). Example: Android with `LiveData`. Separates concerns, improves testability.","difficulty":"easy","topic":"Android Architecture","role":"Android","role":"Mobile App Developer (Android)"}
{
"question":"What is the difference between MVC, MVP, and MVVM architectures?","answer":"MVC: View-Controller coupled; MVP: View-Presenter decoupled; MVVM: ViewModel with binding. Example: `MVVM with `LiveData` in Android. MVVM preferred for modern apps.","difficulty":"medium","topic":"Android Architecture","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is the Singleton design pattern?","answer":"Singleton ensures one instance. Example: `object MySingleton` in Kotlin. In Android, used for global state (e.g., API clients).","difficulty":"easy","topic":"Design Patterns","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is the Repository design pattern?","answer":"Repository abstracts data sources (e.g., API, database). Example: `class Repo { fun getData() = dao.getData() + api.getData() }`. For Android clean data layers.","difficulty":"medium","topic":"Design Patterns","role":"Mobile App Developer (Android, iOS)"}
{
"question":"How would you design a WhatsApp-like app?","answer":"WhatsApp: Client-server with WebSocket for real-time messaging, SQLite for local chats, API for sync, encryption (end-to-end), FCM for notifications. Example: Android app with `Room` for persistence. Scales communication.","difficulty":"hard","topic":"System Design","role":"Mobile App Developer (Android, iOS)"}
{
"question":"How would you design Instagram Stories?","answer":"Stories: `RecyclerView` for display, timer for 24h expiry, API for fetching, local SQLite cache, `ViewModel` for data. Example: `recyclerView.adapter = StoriesAdapter()`. Handles Android media playback.","difficulty":"hard","topic":"System Design","role":"Mobile App Developer (Android, iOS)"}
{
"question":"How to implement offline support in an Android app?","answer":"Use Room for caching, WorkManager for sync, network state monitoring. Example: `Room.databaseBuilder(context, AppDb::class.java, "db").build()`. Ensures Android data availability without internet.","difficulty":"hard","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is memory management done in Android?","answer":"Android uses ART for garbage collection, memory compaction. Manage with `Bitmap` pooling, avoiding leaks, using LeakCanary. Example: `Glide.with(context).load().into()`. Optimizes Android memory.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is the difference between Unit and Nothing in Kotlin?","answer":"Unit is a type for functions returning nothing meaningful (like void); `Nothing` indicates a function never returns (e.g., throws). Example: `fun fail(): Nothing = throw Exception()`. In Android, used for type-safe APIs.","difficulty":"medium","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is the difference between fold and reduce in Kotlin?","answer":"`fold` takes an initial value, accumulates with a function; `reduce` uses the first element, no initial value. Example: `list.fold(0, { acc, x -> acc + x })` vs `list.reduce({ acc, x -> acc + x })`. For Android data processing.","difficulty":"medium","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is WorkManager in Android?","answer":"WorkManager schedules deferrable, guaranteed background tasks. Example: `WorkManager.getInstance(context).enqueue(OneTimeWorkRequestBuilder<MyWorker>().build())`. Handles Android tasks like uploads, even after reboots.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is the difference between Flow and LiveData?","answer":"Flow is for general reactive streams, works with Coroutines; LiveData is lifecycle-aware, tied to UI. Example: `flow { emit(1) }.collect()` vs `liveData.value = 1`. Use Flow for flexibility, LiveData for Android UI.","difficulty":"medium","topic":"Android/Kotlin","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is an extension function in Kotlin?","answer":"Extension functions add methods to existing classes. Example: `fun String.addPrefix(p: String) = p + this`. In Android, enhances readability for utilities like `view.gone()`.","difficulty":"medium","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is the sealed class in Kotlin?","answer":"Sealed class restricts subclasses to the same file. Example: `sealed class Result { data class Success(val data: String) : Result() }`. In Android, used for state modeling.","difficulty":"medium","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is ViewHolder in RecyclerView?","answer":"ViewHolder caches view references for RecyclerView items, improving performance. Example: `class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView)`. Essential for efficient Android lists.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is the difference between a regular class and an abstract class in Kotlin?","answer":"Regular class can be instantiated; abstract class cannot, used as a blueprint with abstract members. Example: `abstract class Base { abstract fun act() }`. In Android, for base implementations.","difficulty":"easy","topic":"Kotlin","role":"Mobile App Developer (Android, iOS)"}
{
"question":"How to handle screen rotation in Android?","answer":"Use `onSaveInstanceState()` to save state, ViewModel for data, or `setRetainInstance(true)` for Fragments. Example: `outState.putString("key", data)`. Ensures Android UI persistence.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is the difference between ViewModel and SavedStateHandle?","answer":"ViewModel holds UI data across lifecycle; SavedStateHandle persists data in `Bundle` for process death. Example: `savedStateHandle.get<String>("key")`. Use both in Android MVVM.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is the different types of Services in Android?","answer":"Types: `Foreground` (user-visible), `Background` (general tasks), `Bound` (client-server). Example: `startService(Intent(context, MyService::class.java))`. For Android background work.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is the different types of Intents in Android?","answer":"Types: explicit (specific component), implicit (action-based). Example: `Intent(context, SecondActivity::class.java)` (explicit). Enables Android navigation/sharing.","difficulty":"easy","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is a Choreographer in Android?","answer":"Choreographer synchronizes UI rendering with display refresh (e.g., 60fps). Example: `Choreographer.getInstance().postFrameCallback()`. Manages Android animations.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{
"question":"What is StrictMode in Android?","answer":"StrictMode detects bad practices (e.g., disk I/O on main thread) during development. Example: `StrictMode.setThreadPolicy(ThreadPolicy.Builder().detectAll().penaltyLog().build())`. Improves Android app quality.","difficulty":"medium","topic":"Android","role":"Mobile App Developer (Android, iOS)"}
{"question": "What is Core Data?", "answer": "Core Data is a framework provided by Apple for managing the model layer of an application. It allows you to store, retrieve, and manipulate data using a high-level object-oriented interface. Core Data can persist data to a variety of storage mechanisms, including SQLite databases, XML files, and binary files.", "difficulty": "medium", "topic": "Database", "role": "Mobile App Developer (Android, iOS)"}
{"question": "When would you use Core Data over NSUserDefault?", "answer": "Core Data is used for managing complex data models with relationships, while NSUserDefaults is suitable for storing small amounts of simple data, such as user preferences or settings. If you need to store a large amount of structured data, Core Data is a better choice.", "difficulty": "easy", "topic": "Database", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is a managed object context?", "answer": "A managed object context is an instance of NSManagedObjectContext, which represents a single object space or scratch pad in which you can perform operations on managed objects. It acts as an intermediary between the managed objects and the persistent store coordinator.", "difficulty": "medium", "topic": "Database", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is NSFetchRequest?", "answer": "NSFetchRequest is a class in Core Data that allows you to retrieve data from a persistent store. It defines the criteria for fetching data, such as the entity to fetch, predicates, sort descriptors, and fetch limits.", "difficulty": "medium", "topic": "Database", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What are some ways of debugging in iOS?", "answer": "Some ways of debugging in iOS include using print statements, breakpoints, the debugger console, and Instruments. You can also use third-party tools like Reveal or Flex to inspect the UI and memory.", "difficulty": "easy", "topic": "Debugging", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is Singleton Pattern?", "answer": "The Singleton pattern ensures that only one instance of a class is created and provides a global point of access to that instance. In iOS, singletons are often used for managing shared resources, such as network managers or database connections.", "difficulty": "easy", "topic": "Design Pattern", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the delegation pattern?", "answer": "The delegation pattern is a design pattern where an object delegates tasks to another object, known as the delegate. The delegate is responsible for performing certain actions or providing data on behalf of the delegating object. This pattern is widely used in iOS, such as in UITableViewDelegate and UITextFieldDelegate.", "difficulty": "medium", "topic": "Design Pattern", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is MVC?", "answer": "MVC (Model-View-Controller) is a design pattern that separates an application into three main components: the model, which represents the data and business logic; the view, which displays the data; and the controller, which handles user input and updates the model and view accordingly.", "difficulty": "easy", "topic": "Design Pattern", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is MVVM?", "answer": "MVVM (Model-View-ViewModel) is a design pattern that separates an application into three main components: the model, which represents the data; the view, which displays the data; and the view model, which acts as an intermediary between the model and the view, handling the presentation logic.", "difficulty": "medium", "topic": "Design Pattern", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What considerations do you need when writing a UITableViewController which shows images downloaded from a remote server?", "answer": "When writing a UITableViewController that shows images downloaded from a remote server, you need to consider the following: - Downloading images asynchronously to avoid blocking the main thread. - Caching images to improve performance and reduce network usage. - Handling image loading and caching efficiently to prevent memory issues. - Ensuring that the correct image is displayed for each cell, especially when cells are reused. - Handling errors and displaying placeholders or error messages when necessary.", "difficulty": "hard", "topic": "General / Uncategorized", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is a protocol? How do you define your own protocol?", "answer": "A protocol is a blueprint of methods, properties, and other requirements that a class, struct, or enum can adopt. To define your own protocol, you use the `protocol` keyword followed by the protocol name and a list of requirements inside curly braces.", "difficulty": "easy", "topic": "General / Uncategorized", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is waterfall methodology and Agile methodology? What are the differences between them?", "answer": "Waterfall methodology is a linear, sequential approach to software development, where each phase must be completed before the next one begins. Agile methodology is an iterative, incremental approach that emphasizes flexibility, collaboration, and customer feedback. The main differences are: - Waterfall is rigid and follows a fixed sequence, while Agile is flexible and adapts to changes. - Waterfall has a single delivery at the end, while Agile delivers working software in iterations. - Waterfall has limited customer involvement, while Agile involves customers throughout the process.", "difficulty": "medium", "topic": "General / Uncategorized", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between a class and an object?", "answer": "A class is a blueprint or template that defines the properties and behaviors of a type of object. An object is an instance of a class, created from the class definition.", "difficulty": "easy", "topic": "General / Uncategorized", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is JSON? What are the pros and cons?", "answer": "JSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write and easy for machines to parse and generate. Pros include simplicity, readability, and widespread support. Cons include limited data types and potential security issues if not handled properly.", "difficulty": "easy", "topic": "General / Uncategorized", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between not-running, inactive, active, background and suspended execution states?", "answer": "- Not-running: The app is not launched or has been terminated. - Inactive: The app is running in the foreground but not receiving events. - Active: The app is running in the foreground and receiving events. - Background: The app is running in the background and executing code. - Suspended: The app is in the background and not executing code.", "difficulty": "medium", "topic": "General / Uncategorized", "role": "Mobile App Developer (Android, iOS)"}
{"question": "Is it faster to iterate through an NSArray or an NSSet?", "answer": "Iterating through an NSArray is generally faster because it is an ordered collection, and you can access elements by index. NSSet is an unordered collection, so iterating through it may be slower due to the lack of order.", "difficulty": "medium", "topic": "General / Uncategorized", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is KVO?", "answer": "KVO (Key-Value Observing) is a mechanism that allows objects to be notified of changes to specific properties of other objects. It is useful for observing changes in model objects and updating the UI accordingly.", "difficulty": "medium", "topic": "General / Uncategorized", "role": "Mobile App Developer (Android, iOS)"}
{"question": "Why do you generally create a weak reference when using self in a block?", "answer": "Creating a weak reference to self in a block prevents retain cycles, which can lead to memory leaks. Since blocks capture strong references to objects, using a weak reference ensures that the object can be deallocated properly.", "difficulty": "medium", "topic": "Memory Management", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is memory management handled on iOS?", "answer": "Memory management in iOS is handled using Automatic Reference Counting (ARC), which automatically manages the memory of objects by keeping track of the number of references to each object and deallocating them when the reference count reaches zero.", "difficulty": "medium", "topic": "Memory Management", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between weak, strong and unowned?", "answer": "- Strong: The default reference type, which increases the reference count of an object. - Weak: A reference that does not increase the reference count and becomes nil when the object is deallocated. - Unowned: Similar to weak, but does not become nil and assumes the object will always exist while the reference is in use.", "difficulty": "medium", "topic": "Memory Management", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is a memory leak?", "answer": "A memory leak occurs when an object is allocated memory but is not properly deallocated, leading to wasted memory resources. In iOS, memory leaks can happen due to retain cycles or improper memory management.", "difficulty": "easy", "topic": "Memory Management", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is a retain cycle?", "answer": "A retain cycle occurs when two or more objects hold strong references to each other, preventing them from being deallocated. This can lead to memory leaks.", "difficulty": "medium", "topic": "Memory Management", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between copy and retain?", "answer": "- Retain: Increases the reference count of an object, creating a new reference to the same object. - Copy: Creates a new object with the same values as the original object, with its own reference count.", "difficulty": "medium", "topic": "Memory Management", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between a stack vs a heap?", "answer": "- Stack: A region of memory that stores temporary variables and function call information, managed in a last-in, first-out (LIFO) order. - Heap: A region of memory used for dynamic memory allocation, where objects are stored and managed by the programmer or runtime.", "difficulty": "medium", "topic": "Memory Management", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is synthesize in Objective-C?", "answer": "@synthesize is a directive in Objective-C that automatically generates getter and setter methods for properties declared in the interface.", "difficulty": "easy", "topic": "Objective-C", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is dynamic in Objective-C?", "answer": "@dynamic is a directive in Objective-C that tells the compiler that the getter and setter methods for a property will be provided at runtime, rather than being generated automatically.", "difficulty": "medium", "topic": "Objective-C", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between _name vs self.name?", "answer": "- _name: Directly accesses the instance variable. - self.name: Accesses the property through its getter or setter methods.", "difficulty": "medium", "topic": "Objective-C", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What are blocks in Objective-C?", "answer": "Blocks are anonymous functions in Objective-C that can be used to encapsulate code and pass it as arguments to methods or functions. They are similar to closures or lambdas in other languages.", "difficulty": "medium", "topic": "Objective-C", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between category and extension in Objective-C?", "answer": "- Category: Allows you to add methods to an existing class without subclassing. - Extension: Allows you to add methods and properties to a class, but only within the same file or module.", "difficulty": "medium", "topic": "Objective-C", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between public and open? Why is it important to have both?", "answer": "- Public: Allows access from any module, but does not allow subclassing or overriding. - Open: Allows access, subclassing, and overriding from any module. It is important to have both to control the level of access and modification allowed for classes and methods.", "difficulty": "medium", "topic": "Swift", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between var and let?", "answer": "- var: Declares a mutable variable. - let: Declares an immutable constant.", "difficulty": "easy", "topic": "Swift", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between a struct and a class?", "answer": "- Struct: Value type, copied when passed. - Class: Reference type, passed by reference.", "difficulty": "easy", "topic": "Swift", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between implicit and explicit?", "answer": "- Implicit: The type is inferred by the compiler. - Explicit: The type is explicitly declared by the programmer.", "difficulty": "easy", "topic": "Swift", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between synchronous and asynchronous task?", "answer": "- Synchronous: Tasks are executed sequentially, blocking further execution until completion. - Asynchronous: Tasks are executed concurrently, allowing other tasks to run while waiting for completion.", "difficulty": "medium", "topic": "Thread Management", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between atomic and non-atomic synthesized properties?", "answer": "- Atomic: Ensures that property access is thread-safe, but may be slower. - Non-atomic: Does not guarantee thread safety, but is faster.", "difficulty": "medium", "topic": "Thread Management", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is GCD and how is it used?", "answer": "GCD (Grand Central Dispatch) is a framework for managing concurrent operations in iOS. It allows you to execute tasks asynchronously or synchronously on different queues, such as the main queue or background queues.", "difficulty": "medium", "topic": "Thread Management", "role": "Mobile App Developer (Android, iOS)"}
{"question": "Explain the difference between Serial vs Concurrent.", "answer": "- Serial: Tasks are executed one after another in a specific order. - Concurrent: Tasks can be executed simultaneously, potentially out of order.", "difficulty": "medium", "topic": "Thread Management", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the purpose of unit testing? What are the benefits?", "answer": "Unit testing is the practice of testing individual units of code to ensure they work as expected. Benefits include catching bugs early, improving code quality, and facilitating refactoring.", "difficulty": "easy", "topic": "Unit Testing / UI Testing", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between viewDidLoad and viewDidAppear? Which should you use to load data from a remote server to display in the view?", "answer": "- viewDidLoad: Called when the view is loaded into memory, typically used for one-time setup. - viewDidAppear: Called when the view becomes visible, useful for tasks that need to run every time the view appears. For loading data from a remote server, it's generally better to use viewDidLoad to avoid unnecessary network requests.", "difficulty": "medium", "topic": "View / Storyboard", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between frame and bound of a UIView?", "answer": "- Frame: The view's location and size relative to its superview's coordinate system. - Bounds: The view's location and size relative to its own coordinate system.", "difficulty": "medium", "topic": "View / Storyboard", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the reuseIdentifier for?", "answer": "The reuseIdentifier is used to identify cells that can be reused in a UITableView or UICollectionView, improving performance by avoiding the creation of new cells.", "difficulty": "easy", "topic": "View / Storyboard", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is autolayout?", "answer": "Auto Layout is a constraint-based layout system in iOS that allows you to define the position and size of views relative to other views, ensuring that the UI adapts to different screen sizes and orientations.", "difficulty": "medium", "topic": "View / Storyboard", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between a shallow copy and a deep copy?", "answer": "- Shallow copy: Creates a new object that references the same memory locations as the original object. - Deep copy: Creates a new object with its own memory locations, copying the values from the original object.", "difficulty": "medium", "topic": "General / Uncategorized", "role": "Mobile App Developer (Android, iOS)"}
{"question": "How does Automatic Reference Counting (ARC) work in iOS?", "answer": "ARC automatically manages memory by keeping track of the number of references to each object. When the reference count reaches zero, the object is deallocated.", "difficulty": "medium", "topic": "Memory Management", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the purpose of the AppDelegate in an iOS application?", "answer": "The AppDelegate is responsible for handling application-level events, such as launching, terminating, and handling background tasks.", "difficulty": "easy", "topic": "General / Uncategorized", "role": "Mobile App Developer (Android, iOS)"}
{"question": "Explain the concept of delegation in iOS.", "answer": "Delegation is a design pattern where an object delegates tasks to another object, known as the delegate. The delegate is responsible for performing certain actions or providing data on behalf of the delegating object.", "difficulty": "medium", "topic": "Design Pattern", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between a UIView and a CALayer?", "answer": "- UIView: A high-level object that represents a rectangular area on the screen, handling user interactions and layout. - CALayer: A low-level object that manages the visual content of a view, handling rendering and animations.", "difficulty": "medium", "topic": "View / Storyboard", "role": "Mobile App Developer (Android, iOS)"}
{"question": "How do you handle memory management in iOS?", "answer": "Memory management in iOS is handled using ARC, which automatically manages the memory of objects. You can also use tools like Instruments to detect memory leaks and optimize memory usage.", "difficulty": "medium", "topic": "Memory Management", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the purpose of the NSNotificationCenter?", "answer": "NSNotificationCenter is a mechanism for broadcasting notifications to multiple objects, allowing them to respond to events without being tightly coupled.", "difficulty": "medium", "topic": "General / Uncategorized", "role": "Mobile App Developer (Android, iOS)"}
{"question": "Explain the concept of Key-Value Coding (KVC).", "answer": "KVC is a mechanism that allows you to access and manipulate object properties using string identifiers, rather than direct method calls. It is useful for dynamic property access and manipulation.", "difficulty": "medium", "topic": "General / Uncategorized", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between a synchronous and asynchronous network request?", "answer": "- Synchronous: The request blocks the current thread until it completes. - Asynchronous: The request runs in the background, allowing the current thread to continue executing.", "difficulty": "medium", "topic": "Networking", "role": "Mobile App Developer (Android, iOS)"}
{"question": "How do you handle errors in Swift?", "answer": "Errors in Swift are handled using the `do-try-catch` construct, where you can throw and catch errors using the `throw` and `catch` keywords.", "difficulty": "medium", "topic": "Swift", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the purpose of the @escaping attribute in Swift closures?", "answer": "The @escaping attribute indicates that a closure can outlive the function it was passed to, allowing it to be stored or executed later.", "difficulty": "medium", "topic": "Swift", "role": "Mobile App Developer (Android, iOS)"}
{"question": "Explain the concept of protocol-oriented programming in Swift.", "answer": "Protocol-oriented programming is a paradigm in Swift that emphasizes the use of protocols to define interfaces and behaviors, promoting composition over inheritance.", "difficulty": "hard", "topic": "Swift", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between a computed property and a stored property in Swift?", "answer": "- Stored property: A variable or constant that holds a value. - Computed property: A property that calculates its value on the fly, rather than storing it.", "difficulty": "easy", "topic": "Swift", "role": "Mobile App Developer (Android, iOS)"}
{"question": "How do you implement a singleton in Swift?", "answer": "A singleton in Swift can be implemented using a static constant that holds the single instance of the class, with a private initializer to prevent multiple instances.", "difficulty": "medium", "topic": "Design Pattern", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the purpose of the Codable protocol in Swift?", "answer": "The Codable protocol allows you to encode and decode Swift types to and from external representations, such as JSON or Property Lists.", "difficulty": "medium", "topic": "Swift", "role": "Mobile App Developer (Android, iOS)"}
{"question": "Explain the concept of optionals in Swift.", "answer": "Optionals in Swift represent values that may or may not be present. They are used to handle cases where a value might be missing, and they must be unwrapped to access the underlying value.", "difficulty": "easy", "topic": "Swift", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between a struct and an enum in Swift?", "answer": "- Struct: A value type that can have properties and methods. - Enum: A value type that represents a set of related values, with optional associated values.", "difficulty": "easy", "topic": "Swift", "role": "Mobile App Developer (Android, iOS)"}
{"question": "How do you handle concurrency in iOS?", "answer": "Concurrency in iOS can be handled using Grand Central Dispatch (GCD), OperationQueue, or Swift's async/await framework. These tools allow you to execute tasks concurrently and manage dependencies between tasks.", "difficulty": "hard", "topic": "Thread Management", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the purpose of the DispatchQueue in Swift?", "answer": "DispatchQueue is a class in GCD that manages the execution of tasks on a queue, either serially or concurrently. It is used to perform tasks asynchronously or synchronously.", "difficulty": "medium", "topic": "Thread Management", "role": "Mobile App Developer (Android, iOS)"}
{"question": "Explain the concept of lazy loading in iOS.", "answer": "Lazy loading is a technique where resources, such as images or data, are loaded only when they are needed, rather than loading everything at once. This improves performance and reduces memory usage.", "difficulty": "medium", "topic": "General / Uncategorized", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between a weak and an unowned reference in Swift?", "answer": "- Weak: A reference that does not keep a strong hold on the object, and becomes nil when the object is deallocated. - Unowned: A reference that does not keep a strong hold on the object, but does not become nil and assumes the object will always exist.", "difficulty": "medium", "topic": "Memory Management", "role": "Mobile App Developer (Android, iOS)"}
{"question": "How do you implement a custom operator in Swift?", "answer": "To implement a custom operator in Swift, you define a new operator using the `operator` keyword, specify its precedence and associativity, and provide an implementation for the operator function.", "difficulty": "hard", "topic": "Swift", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the purpose of the @autoclosure attribute in Swift?", "answer": "The @autoclosure attribute automatically wraps an expression in a closure, allowing you to pass it as a parameter to a function without explicitly creating a closure.", "difficulty": "hard", "topic": "Swift", "role": "Mobile App Developer (Android, iOS)"}
{"question": "Explain the concept of property observers in Swift.", "answer": "Property observers are special blocks of code that are executed when a property's value changes. They can be defined using the `willSet` and `didSet` keywords.", "difficulty": "medium", "topic": "Swift", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the difference between a static and a class method in Swift?", "answer": "- Static method: A method that belongs to the type itself, and cannot be overridden. - Class method: A method that belongs to the type, but can be overridden by subclasses.", "difficulty": "medium", "topic": "Swift", "role": "Mobile App Developer (Android, iOS)"}
{"question": "How do you handle localization in an iOS app?", "answer": "Localization in iOS is handled by creating separate resource files for each language, using the `Localizable.strings` file for strings, and using the `NSLocalizedString` function to retrieve localized strings.", "difficulty": "medium", "topic": "General / Uncategorized", "role": "Mobile App Developer (Android, iOS)"}
{"question": "What is the purpose of the UserDefaults class in iOS?", "answer": "UserDefaults is a class that allows you to store and retrieve small amounts of data, such as user preferences or settings, in a key-value format.", "difficulty": "easy", "topic": "General / Uncategorized", "role": "Mobile App Developer (Android, iOS)"}
{"question": "Explain the concept of Core Animation in iOS.", "answer": "Core Animation is a framework that allows you to create smooth, hardware-accelerated animations for your app's user interface. It provides a high-level API for animating views and layers.", "difficulty": "medium", "topic": "View / Storyboard", "role": "Mobile App Developer (Android, iOS)"}