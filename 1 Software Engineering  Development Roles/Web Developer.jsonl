{"question": "What is a stateless component?", "answer": "A stateless component is a component whose behavior does not depend on its state. It can be a functional or class component in React. Stateless functional components are preferred when lifecycle hooks are not needed, as they are easier to maintain and test, producing the same output for the same props. They avoid the `this` keyword, making them simpler.", "difficulty": "easy", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the difference between the equality operators `==` and `===`?", "answer": "The `===` operator checks for strict equality, requiring both type and value to be the same. The `==` operator performs type coercion, converting operands to the same type before comparing their values. Use `===` to avoid unintuitive results from type coercion. Falsy values like `false`, `0`, `\"\"`, `null`, `undefined`, and `NaN` can affect `==` comparisons.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the difference between an element and a component in React?", "answer": "An element is a plain JavaScript object representing a DOM node or component, immutable and cheap to create. A component is a function or class that takes props as input, returns an element tree, and may have state or lifecycle methods. Components can initiate side effects (e.g., AJAX requests, DOM mutations) and are more expensive to create.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is a stateful component in React?", "answer": "A stateful component’s behavior depends on its internal state, so two instances with the same props may render different outputs. They can be class components (with state initialized in the constructor) or function components (using `useState` hooks).", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "In which states can a Promise be?", "answer": "A Promise can be in one of three states: **pending** (initial, neither fulfilled nor rejected), **fulfilled** (operation completed successfully), or **rejected** (operation failed). A pending promise transitions to fulfilled with a value or rejected with an error, triggering associated handlers.", "difficulty": "easy", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the difference between the postfix `i++` and prefix `++i` increment operators?", "answer": "Both increment the variable by 1. The postfix `i++` evaluates to the value before incrementing (e.g., `let i = 0; i++; // 0`), while the prefix `++i` evaluates to the value after incrementing (e.g., `let i = 0; ++i; // 1`). After either operation, `i` equals 1.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "Create a function `batches` that returns the maximum number of whole batches that can be cooked from a recipe.", "answer": "The `batches` function calculates the maximum number of whole batches by finding the minimum ratio of available ingredients to required amounts, flooring the result. If an ingredient is missing, the ratio is `0`. Example implementation: \nconst batches = (recipe, available) => Math.floor(Math.min(...Object.keys(recipe).map(k => available[k] / recipe[k] || 0)))\nThis ensures all ingredients are sufficient for the calculated number of batches.", "difficulty": "hard", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What does `typeof typeof 0` evaluate to?", "answer": "It evaluates to `\"string\"`. First, `typeof 0` returns `\"number\"`, and then `typeof \"number\"` returns `\"string\"`.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How do you clone an object in JavaScript?", "answer": "To create a shallow clone, use the spread operator (`const shallowClone = { ...obj }`), `Object.assign({}, obj)`, or `Object.keys(obj).reduce(...)`. For deep cloning, `JSON.parse(JSON.stringify(obj))` works for simple objects but is CPU-intensive and excludes functions or circular references. Deep cloning complex objects requires custom recursive functions.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the difference between synchronous and asynchronous code in JavaScript?", "answer": "Synchronous code executes sequentially, with each operation waiting for the previous one to complete. Asynchronous code allows operations to run concurrently, processed outside the main thread (e.g., via browser APIs like `setTimeout` or `XMLHttpRequest`). JavaScript’s single-threaded nature uses an event loop for async operations, ensuring non-blocking behavior.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How do you compare two objects in JavaScript?", "answer": "Objects are compared by reference, not value, so `obj1 == obj2` or `obj1 === obj2` returns `false` unless they reference the same object. To compare structure, use a function like: \nfunction isDeepEqual(obj1, obj2, testPrototypes = false) {\n  if (obj1 === obj2) return true;\n  if (typeof obj1 === \"function\" && typeof obj2 === \"function\") return obj1.toString() === obj2.toString();\n  if (obj1 instanceof Date && obj2 instanceof Date) return obj1.getTime() === obj2.getTime();\n  if (Object.prototype.toString.call(obj1) !== Object.prototype.toString.call(obj2) || typeof obj1 !== \"object\") return false;\n  const prototypesAreEqual = testPrototypes ? isDeepEqual(Object.getPrototypeOf(obj1), Object.getPrototypeOf(obj2), true) : true;\n  const obj1Props = Object.getOwnPropertyNames(obj1);\n  const obj2Props = Object.getOwnPropertyNames(obj2);\n  return obj1Props.length === obj2Props.length && prototypesAreEqual && obj1Props.every(prop => isDeepEqual(obj1[prop], obj2[prop]));\n}\nThis checks property values recursively, optionally including prototypes.", "difficulty": "hard", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is a cross-site scripting attack (XSS) and how do you prevent it?", "answer": "XSS is a client-side code injection attack where malicious scripts are injected into a website, often through unvalidated user input. The script can access cookies, manipulate the DOM, or send unauthorized requests. Prevent it by using `textContent` instead of `innerHTML` on the client to avoid script execution and escaping HTML tags on the server to prevent parsing as HTML.", "difficulty": "medium", "topic": "Security", "role": "Web Developer"}
{"question": "What is CORS?", "answer": "Cross-Origin Resource Sharing (CORS) is a mechanism using HTTP headers to allow a browser to access resources from a different origin than the website’s origin. It’s a security feature to prevent unauthorized cross-origin requests. Browsers enforce the same-origin policy for `XMLHttpRequest` and `fetch`, allowing cross-origin access only if the server includes appropriate CORS headers.", "difficulty": "medium", "topic": "Security", "role": "Web Developer"}
{"question": "What is the DOM?", "answer": "The Document Object Model (DOM) is a cross-platform API representing HTML/XML documents as a tree of nodes (e.g., elements, text). JavaScript can manipulate these nodes to change styles, content, or structure, with changes reflected live. The DOM is built progressively, so scripts manipulating it should run after construction (e.g., in `DOMContentLoaded` or with `defer`).", "difficulty": "easy", "topic": "HTML", "role": "Web Developer"}
{"question": "Create a standalone function `bind` that is functionally equivalent to `Function.prototype.bind`.", "answer": "The `bind` function sets the `this` context of a function and returns a new function that accepts arguments: \nconst bind = (fn, context) => (...args) => fn.apply(context, args);\nExample: `const boundExample = bind(example, { a: true }); boundExample.call({ b: true });` logs `{ a: true }`.", "difficulty": "hard", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What are the differences between `var`, `let`, `const`, and no keyword statements?", "answer": "No keyword assigns to a global variable or reassigns an existing one; in strict mode, it throws an error if undeclared. `var` is function-scoped, hoisted, and can be reassigned/redeclared, causing issues in loops with async callbacks. `let` is block-scoped, hoisted with a temporal dead zone (TDZ), and can be reassigned but not redeclared. `const` is block-scoped, TDZ, and cannot be reassigned but can mutate object properties. Prefer `const` for variables not reassigned, `let` for reassignment, and avoid `var`.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is event delegation and why is it useful? Can you show an example of how to use it?", "answer": "Event delegation involves attaching a single event listener to a parent element to handle events from its children, leveraging event bubbling. Benefits include better performance (fewer listeners) and handling dynamically added elements. Example: \ndocument.addEventListener(\"click\", e => {\n  if (e.target.closest(\"button\")) {\n    handleButtonClick();\n  }\n});\nThis contrasts with attaching listeners to each button individually.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the purpose of callback function as an argument of `setState`?", "answer": "The callback in `setState` runs after the state is updated and the component re-renders, useful for post-update actions. Example: \nsetState({ name: \"sudheer\" }, () => console.log(\"The name has updated and component re-rendered\"));\nLifecycle methods are often preferred over callbacks.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the difference between an expression and a statement in JavaScript?", "answer": "An **expression** produces a value (e.g., `5 + 5`, `true === true`) and can be assigned or passed to functions. A **statement** performs an action (e.g., `if`, `let x = 0`) and cannot be assigned. An **expression statement** combines both (e.g., `var x = y >= 0 ? y : -y`). If it can be printed or assigned, it’s an expression; otherwise, it’s a statement.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What are truthy and falsy values in JavaScript?", "answer": "Truthy values evaluate to `true` in a Boolean context, while falsy values evaluate to `false`. Falsy values are: `false`, `undefined`, `null`, `\"\"`, `NaN`, `0`, `+0`, `-0`. All other values are truthy. Use `Boolean()` or `!!` to test: `Boolean(\"\") // false`, `!![] // true`.", "difficulty": "easy", "topic": "JavaScript", "role": "Web Developer"}
{"question": "Generate an array containing the Fibonacci sequence up until the nth term.", "answer": "Use a function like: \nconst fibonacci = n => [...Array(n)].reduce((acc, val, i) => acc.concat(i > 1 ? acc[i - 1] + acc[i - 2] : i), []);\nThis builds an array of length `n`, where each element is the sum of the previous two for `i > 1`, or `i` for the first two terms.", "difficulty": "hard", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What does `0.1 + 0.2 === 0.3` evaluate to?", "answer": "It evaluates to `false` due to IEEE 754 floating-point precision errors: `0.1 + 0.2 // 0.30000000000000004`. Use a function like `approxEqual(n1, n2, epsilon = 0.0001) => Math.abs(n1 - n2) < epsilon` to compare approximately.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the difference between the array methods `map()` and `forEach()`?", "answer": "`map()` invokes a callback on each array element and returns a new array with the results, ideal for immutable transformations. `forEach()` invokes a callback for each element but returns nothing, used for side effects like mutations. Example: `arr.map(n => n * 2)` returns `[2, 4, 6]`, while `arr.forEach(n => console.log(n))` logs each element.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is short-circuit evaluation in JavaScript?", "answer": "Short-circuit evaluation occurs in logical operations (`||`, `&&`) where evaluation stops as soon as the outcome is determined. For `true || false`, the second operand is skipped (result is `true`). For `false && true`, the second operand is skipped (result is `false`). Used for default values (e.g., `options.setting || \"default\"`) or conditional execution (e.g., `e.target.closest(\"button\") && handleButtonClick(e)`).", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "Are semicolons required in JavaScript?", "answer": "Semicolons are optional due to automatic semicolon insertion (ASI), but required in cases like lines starting with `[` or `(` to avoid parsing errors (e.g., `const x = 3; [1, 2, x].map(n => n * 2)`). Tools like Prettier insert semicolons where needed.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What will the console log in this example: `var foo = 1; var foobar = function() { console.log(foo); var foo = 2; }; foobar();`?", "answer": "It logs `undefined`. Due to hoisting, the local `foo` is declared before `console.log` but not initialized, shadowing the global `foo`. Thus, `foo` is `undefined` at the time of logging.", "difficulty": "hard", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How does hoisting work in JavaScript?", "answer": "Hoisting moves variable and function declarations to the top of their scope during compilation. Only declarations are hoisted, not values. Example: `console.log(hoist); var hoist = \"value\";` logs `undefined`. Function declarations are fully hoisted, allowing calls before definition, but function expressions are not.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the reason for wrapping the entire contents of a JavaScript source file in a function that is immediately invoked?", "answer": "An Immediately Invoked Function Expression (IIFE) creates a private namespace, preventing name clashes between modules/libraries. Example: \nconst myLibrary = (function() { var privateVariable = 2; return { publicMethod: () => privateVariable }; })();\nThis encapsulates `privateVariable`, accessible only via `publicMethod`.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What does the following function return: `function greet() { return { message: \"hello\" }; }`?", "answer": "Due to automatic semicolon insertion (ASI), a semicolon is inserted after `return`, so the function returns `undefined`. The object `{ message: \"hello\" }` is unreachable.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the difference between lexical scoping and dynamic scoping?", "answer": "Lexical scoping determines variable access based on where a function is defined, enabling closures. Dynamic scoping uses the call site to determine variable access. JavaScript uses lexical scoping, making code more predictable.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "Create a function that masks a string of characters with `#` except for the last four characters.", "answer": "Example: \nconst mask = (str, maskChar = \"#\") => str.slice(-4).padStart(str.length, maskChar);\nThis slices the last 4 characters and pads the start with `#` to match the original length. Example: `mask(\"123456789\") // \"#####6789\"`.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the output of the following code: `const a = [1, 2, 3]; const b = [1, 2, 3]; const c = \"1,2,3\"; console.log(a == c); console.log(a == b);`?", "answer": "The first logs `true` because `a == c` converts the array `a` to a string (`\"1,2,3\"`) via type coercion, matching `c`. The second logs `false` because arrays are objects compared by reference, and `a` and `b` are different objects.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How does prototypal inheritance differ from classical inheritance?", "answer": "Prototypal inheritance involves objects inheriting directly from other objects (e.g., via `Object.create()`), while classical inheritance uses classes as blueprints with constructors and the `new` keyword. JavaScript uses prototypal inheritance.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is a MIME type and what is it used for?", "answer": "A MIME type (e.g., `application/json`, `text/html`) classifies file types on the internet, used by browsers/servers to handle files correctly. It consists of a type and subtype (e.g., `application/msword`).", "difficulty": "easy", "topic": "HTML", "role": "Web Developer"}
{"question": "What are Promises?", "answer": "A `Promise` represents the eventual completion or failure of an asynchronous operation, with states: pending, fulfilled, or rejected. Example: \nnew Promise((resolve, reject) => { setTimeout(() => resolve(\"result\"), 100); }).then(console.log).catch(console.error);\nPromises are chainable for handling async results.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What are JavaScript data types?", "answer": "JavaScript has seven data types: six primitives (`Boolean`, `Null`, `Undefined`, `Number`, `String`, `Symbol`) and one non-primitive (`Object`). Arrays, functions, and Dates are objects. Functions are callable objects.", "difficulty": "easy", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What are the advantages of the Node.js error-first callback pattern?", "answer": "The error-first callback pattern (e.g., `fs.readFile(filePath, (err, data) => {...})`) allows early error handling, consistent APIs, and maintainable code by stopping execution if an error occurs. It passes `null` for no error or an `Error` object if an error occurs.", "difficulty": "medium", "topic": "Node", "role": "Web Developer"}
{"question": "What is a callback? Can you show an example using one?", "answer": "A callback is a function passed as an argument to another function, executed after an event or task. Example: \ndocument.addEventListener(\"click\", () => console.log(\"Clicked\"));\nOr synchronous: \nconst map = (arr, callback) => { const result = []; for (let i = 0; i < arr.length; i++) { result.push(callback(arr[i], i)); } return result; }; map([1, 2, 3], n => n * 2); // [2, 4, 6]", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the difference between `null` and `undefined`?", "answer": "`null` explicitly represents \"no value,\" while `undefined` is implicit for uninitialized or nonexistent properties. `typeof null` is `\"object\"` (a bug), and `typeof undefined` is `\"undefined\"`. `null == undefined` is `true`.", "difficulty": "easy", "topic": "JavaScript", "role": "Web Developer"}
{"question": "Describe the different ways to create an object. When should certain ways be preferred?", "answer": "Object literal: `{ name: \"John\" }` – for single instances. Constructor: `function Person(name) { this.name = name; }` – for multiple instances with shared methods via prototype. Factory function: `const createPerson = (name) => ({ name });` – for private data via closures, no `new` needed. `Object.create()`: `const person = Object.create(personProto);` – for explicit prototype setting. Use literals for simple objects, constructors for reusable classes, factories for private data, and `Object.create()` for custom inheritance.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the difference between a parameter and an argument?", "answer": "Parameters are variable names in a function definition (e.g., `function myFunction(param1) {}`), while arguments are values passed when calling the function (e.g., `myFunction(\"arg1\")`). The `arguments` object holds all arguments passed.", "difficulty": "easy", "topic": "JavaScript", "role": "Web Developer"}
{"question": "Does JavaScript pass by value or by reference?", "answer": "JavaScript passes by value. For objects, the value is a reference to the object, so modifications to the object’s properties persist, but reassigning the parameter doesn’t affect the original.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How do you pass an argument to an event handler or callback?", "answer": "Use an arrow function or `bind`: \n<button onClick={() => this.handleClick(id)} />\n<button onClick={this.handleClick.bind(this, id)} />\nThis preserves the `this` context and passes additional arguments.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the purpose of the `alt` attribute on images?", "answer": "The `alt` attribute provides alternative text for images if they cannot be viewed, aiding accessibility for screen readers and SEO for web crawlers. It should describe the image’s content or purpose, but be empty for decorative images.", "difficulty": "easy", "topic": "HTML", "role": "Web Developer"}
{"question": "What is the purpose of cache busting and how can you achieve it?", "answer": "Cache busting ensures browsers download updated files by changing the file’s URL (e.g., `script.js?v=2`). This prevents outdated cached versions from breaking the site. Common techniques include query strings or file renaming.", "difficulty": "medium", "topic": "HTML", "role": "Web Developer"}
{"question": "Can a web page contain multiple `<header>` elements? What about `<footer>` elements?", "answer": "Yes, both `<header>` and `<footer>` elements can appear multiple times, representing the header/footer of their nearest ancestor section (e.g., `<body>`, `<article>`, `<section>`). Each section should have at most one of each.", "difficulty": "easy", "topic": "HTML", "role": "Web Developer"}
{"question": "Briefly describe the correct usage of the HTML5 semantic elements: `<header>`, `<article>`, `<section>`, `<footer>`.", "answer": "`<header>`: Contains introductory/navigational info (e.g., headings, author, nav). `<article>`: Self-contained content (e.g., blog posts, news stories). `<section>`: Groups content with a common theme/purpose. `<footer>`: Holds end-of-section info (e.g., author, copyright, links).", "difficulty": "easy", "topic": "HTML", "role": "Web Developer"}
{"question": "Where and why is the `rel=\"noopener\"` attribute used?", "answer": "The `rel=\"noopener\"` attribute is used on `<a>` tags with `target=\"_blank\"` to prevent the new page from accessing the opener’s `window.opener` property, enhancing security by blocking potential manipulation.", "difficulty": "medium", "topic": "HTML", "role": "Web Developer"}
{"question": "What are `defer` and `async` attributes on a `<script>` tag?", "answer": "Without attributes, scripts execute synchronously, halting parsing. `defer`: Downloads during parsing, executes after parsing, in order. `async`: Downloads during parsing, executes immediately, out of order. Use `defer` for dependent scripts, `async` for independent ones.", "difficulty": "medium", "topic": "HTML", "role": "Web Developer"}
{"question": "What are some differences that XHTML has compared to HTML?", "answer": "XHTML requires a DOCTYPE, quoted attribute values, proper nesting, closed elements, and escaped special characters. It’s case-sensitive (usually lowercase) and allows self-closing tags.", "difficulty": "medium", "topic": "HTML", "role": "Web Developer"}
{"question": "Discuss the differences between an HTML specification and a browser’s implementation thereof.", "answer": "HTML specifications (e.g., HTML5) define rules for valid documents and rendering instructions. Browsers aim to support these but may not fully implement all aspects, leading to cross-browser inconsistencies. Invalid documents rely on browser-specific handling.", "difficulty": "medium", "topic": "HTML", "role": "Web Developer"}
{"question": "What is HTML5 Web Storage? Explain `localStorage` and `sessionStorage`.", "answer": "HTML5 Web Storage allows data storage in name/value pairs. `localStorage` persists until explicitly deleted, while `sessionStorage` lasts for the tab’s lifetime. Both are scoped to the document’s origin, but `sessionStorage` is also tab-specific.", "difficulty": "medium", "topic": "HTML", "role": "Web Developer"}
{"question": "What is CSS BEM?", "answer": "BEM (Block Element Modifier) is a CSS naming convention for maintainable, scoped classes. Blocks are standalone components, elements are their children (e.g., `block__element`), and modifiers indicate state/style variations (e.g., `block__element--modifier`). Example: `navbar__link--active`.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What are the advantages of using CSS preprocessors?", "answer": "CSS preprocessors (e.g., Sass, Less) enable DRY principles with variables, nested selectors, mixins, and loops, improving maintainability and scalability. They offer features like color functions, though CSS variables reduce their necessity. Downsides include setup and compilation time.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "Using flexbox, create a 3-column layout where each column takes up a `col-{n} / 12` ratio of the container.", "answer": "```css\n.row { display: flex; }\n.col-2 { flex: 2; }\n.col-7 { flex: 7; }\n.col-3 { flex: 3; }\n``` This sets the parent to `display: flex` and assigns `flex-grow` values proportional to the desired ratios.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "Can you name the four types of `@media` properties?", "answer": "The four types are: `all` (all devices), `print` (printers), `screen` (screens), and `speech` (screen readers).", "difficulty": "easy", "topic": "CSS", "role": "Web Developer"}
{"question": "Describe the layout of the CSS Box Model and briefly describe each component.", "answer": "The CSS Box Model consists of: **Content**: Inner area (text, images) with `content-box` dimensions. **Padding**: Transparent area around content. **Border**: Surrounds padding and content. **Margin**: Outer transparent layer separating the element from others.", "difficulty": "easy", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the difference between `em` and `rem` units?", "answer": "Both are relative to `font-size`. `em` inherits from the parent element’s `font-size`, while `rem` uses the root (`html`) element’s `font-size` (default 16px).", "difficulty": "easy", "topic": "CSS", "role": "Web Developer"}
{"question": "What are the advantages of using CSS sprites and how are they utilized?", "answer": "CSS sprites combine multiple images into one, reducing HTTP requests and improving load times. They’re implemented using `background-image`, `background-position`, and `background-size` to display specific parts of the sprite.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the difference between '+' and '~' sibling selectors?", "answer": "The `+` (adjacent sibling) selector targets the immediate next sibling (e.g., `div + p`). The `~` (general sibling) selector targets all subsequent siblings (e.g., `div ~ p`).", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "Can you describe how CSS specificity works?", "answer": "Specificity is calculated using a matrix: [inline, ID, class/pseudo-class/attribute, tag/pseudo-element]. Higher values in earlier columns win. Equal specificity uses the last rule in the stylesheet.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is a focus ring? What is the correct solution to handle them?", "answer": "A focus ring is a visible outline on focusable elements (e.g., buttons) indicating focus. Removing it with `outline: 0` harms accessibility. Use `:focus-visible` (with polyfills) to show focus rings only for keyboard users, balancing aesthetics and accessibility.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is WCAG? What are the differences between A, AA, and AAA compliance?", "answer": "WCAG (Web Content Accessibility Guidelines) defines how to make web content accessible. Levels A, AA, and AAA have increasing accessibility requirements, with AAA being the most stringent, impacting design more but ensuring broader accessibility. Some regions mandate AA compliance.", "difficulty": "medium", "topic": "Accessibility", "role": "Web Developer"}
{"question": "What is ARIA and when should you use it?", "answer": "ARIA (Accessible Rich Internet Applications) provides attributes to enhance accessibility for dynamic components, defining roles, states, and properties. Use it when HTML lacks sufficient semantics or browser/AT support, ensuring assistive technologies understand the component.", "difficulty": "medium", "topic": "Accessibility", "role": "Web Developer"}
{"question": "What is the Accessibility Tree?", "answer": "The Accessibility Tree is a browser-generated structure parallel to the DOM, exposing accessibility info to assistive technologies. Semantic HTML ensures it accurately represents content, aiding screen readers.", "difficulty": "medium", "topic": "Accessibility", "role": "Web Developer"}
{"question": "What are landmark roles and how can they be useful?", "answer": "Landmark roles (e.g., `role=\"banner\"`, `role=\"main\"`) identify page sections, helping assistive technology users navigate by allowing them to skip to specific regions. Example: `<div role=\"main\">Main Content</div>`.", "difficulty": "medium", "topic": "Accessibility", "role": "Web Developer"}
{"question": "What is the difference between HTML and React event handling?", "answer": "In HTML, event attributes are lowercase (e.g., `onclick=\"handleClick()\"`), take string functions, and return `false` to prevent default behavior. In React, attributes are camelCase (e.g., `onClick={handleClick}`), take function references, and require `e.preventDefault()`.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What are inline conditional expressions?", "answer": "Inline conditional expressions in React use `&&` or `? :` operators to render content conditionally within JSX, as statements aren’t allowed. Example: \n{messages.length > 0 ? <h2>You have {messages.length} unread messages.</h2> : <h2>No messages.</h2>}", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What are the lifecycle methods in React?", "answer": "`getDerivedStateFromProps`: Updates state based on props before rendering. `componentDidMount`: Runs after mounting for setup (e.g., AJAX, event listeners). `shouldComponentUpdate`: Controls re-rendering for performance. `getSnapshotBeforeUpdate`: Captures data before update. `componentDidUpdate`: Handles DOM updates post-render. `componentWillUnmount`: Cleans up (e.g., removes listeners). `componentDidCatch`: Catches errors in child components.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "Which is the preferred option between callback refs and findDOMNode()?", "answer": "Callback refs (e.g., `<div ref={node => this.node = node} />`) are preferred over `findDOMNode()`, which hinders React optimizations and is deprecated. Callback refs directly reference DOM nodes.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What are fragments?", "answer": "Fragments group multiple elements in React without adding extra DOM nodes, improving performance and supporting layouts like tables or Flexbox. Example: `<><ChildA /><ChildB /></>`.", "difficulty": "easy", "topic": "React", "role": "Web Developer"}
{"question": "How do you ensure methods have the correct `this` context in React component classes?", "answer": "Bind methods in the constructor (`this.handleClick = this.handleClick.bind(this)`), use class fields (`handleClick = () => {...}`), or inline arrow functions (`onClick={e => this.handleClick(e)}`). Class fields or constructor binding are preferred for performance to avoid re-rendering issues.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What are error boundaries in React?", "answer": "Error boundaries are React components that catch errors in their child tree, log them, and display a fallback UI. Define them with `static getDerivedStateFromError` or `componentDidCatch`. Example: \nclass ErrorBoundary extends React.Component {\n  state = { hasError: false };\n  static getDerivedStateFromError(error) { return { hasError: true }; }\n  componentDidCatch(error, info) { logErrorToMyService(error, info); }\n  render() { return this.state.hasError ? <h1>Error</h1> : this.props.children; }\n}", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What are higher-order components?", "answer": "Higher-order components (HOCs) are functions that take a component and return a new component with enhanced behavior (e.g., state/prop manipulation). Example: `const EnhancedComponent = higherOrderComponent(WrappedComponent)`.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "How to apply prop validation in React?", "answer": "Use `PropTypes` to check prop types in development mode. Example: \nimport PropTypes from \"prop-types\";\nclass User extends React.Component {\n  static propTypes = { name: PropTypes.string.isRequired, age: PropTypes.number.isRequired };\n  render() { return <h1>Welcome, {this.props.name}</h1>; }\n}", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is context?", "answer": "Context allows data (e.g., user, theme) to pass through the component tree without prop drilling. Use `React.createContext` with `Provider` and `Consumer`. Example: `const { Provider, Consumer } = React.createContext(defaultValue)`.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What are refs in React? When should they be used?", "answer": "Refs provide access to DOM nodes or React elements, created with `React.createRef()` or callback refs. Use sparingly for focus management, animations, or third-party DOM libraries. Example: \nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n  render() { return <div ref={this.myRef} />; }\n}", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the `children` prop?", "answer": "The `children` prop allows components to be passed as data to other components, enabling composition. React provides utilities like `React.Children.map`. Example: \nfunction GenericBox({ children }) { return <div>{children}</div>; }", "difficulty": "easy", "topic": "React", "role": "Web Developer"}
{"question": "What are portals in React?", "answer": "Portals render children into a DOM node outside the parent’s hierarchy using `ReactDOM.createPortal(child, container)`. Useful for modals or popups.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is REST?", "answer": "REST (Representational State Transfer) is a design pattern for web applications, exposing resources (e.g., `posts`) via endpoints (URLs) and HTTP methods (GET, POST, PUT, DELETE). Example: `/posts/` (GET), `/posts/new` (POST).", "difficulty": "medium", "topic": "Node", "role": "Web Developer"}
{"question": "How can you avoid callback hells?", "answer": "Avoid callback hell by using: **Async/await**: `async function() { const a = await getData(); }`. Modularization: Break callbacks into separate functions. **Control flow libraries** (e.g., `async`). Generators with Promises. Async/await is preferred for readability.", "difficulty": "medium", "topic": "Node", "role": "Web Developer"}
{"question": "What is the event loop in Node.js?", "answer": "The event loop handles async callbacks in Node.js, queuing them and executing them when responses are received, enabling non-blocking I/O despite JavaScript’s single-threaded nature.", "difficulty": "medium", "topic": "Node", "role": "Web Developer"}
{"question": "What is an Activity in Android, and how does it differ from a Fragment?", "answer": "An Activity is a single screen in an Android app, managing UI and user interactions, with a lifecycle (e.g., `onCreate`, `onStart`). A Fragment is a modular UI component within an Activity, reusable across Activities, with its own lifecycle. Activities are standalone, while Fragments are dependent on Activities for context.", "difficulty": "easy", "topic": "Mobile App Development", "role": "Web Developer"}
{"question": "Explain the purpose of an Intent in Android and provide an example.", "answer": "An Intent facilitates communication between components (e.g., Activities, Services). It can start Activities, send broadcasts, or pass data. Example: \nIntent intent = new Intent(this, SecondActivity.class);\nintent.putExtra(\"key\", \"value\");\nstartActivity(intent);\nThis starts `SecondActivity` with data.", "difficulty": "medium", "topic": "Mobile App Development", "role": "Web Developer"}
{"question": "How do you handle configuration changes (e.g., screen rotation) in Android?", "answer": "Configuration changes can be handled by: Saving state in `onSaveInstanceState` and restoring in `onRestoreInstanceState` or `onCreate`. Using ViewModel to persist data across configuration changes. Adding `android:configChanges=\"orientation|screenSize\"` in the manifest to handle changes manually. Example with ViewModel: \npublic class MyViewModel extends ViewModel {\n  private MutableLiveData<String> data = new MutableLiveData<>();\n  public void setData(String value) { data.setValue(value); }\n  public LiveData<String> getData() { return data; }\n}", "difficulty": "medium", "topic": "Mobile App Development", "role": "Web Developer"}
{"question": "What is the difference between UIKit and SwiftUI in iOS development?", "answer": "UIKit is a framework for building iOS interfaces imperatively, using classes like `UIViewController` and storyboards. SwiftUI is a declarative framework introduced in iOS 13, using Swift syntax for reactive UI updates. SwiftUI is modern, simpler for dynamic UIs, but UIKit is more mature and supports older iOS versions.", "difficulty": "medium", "topic": "Mobile App Development", "role": "Web Developer"}
{"question": "How do you implement a network request in iOS using URLSession?", "answer": "Use `URLSession` for network requests. Example: \nlet url = URL(string: \"https://api.example.com/data\")!\nlet task = URLSession.shared.dataTask(with: url) { data, response, error in\n  if let error = error {\n    print(\"Error: \\(error)\")\n    return\n  }\n  if let data = data {\n    // Process data\n  }\n}\ntask.resume()\nThis fetches data asynchronously, handling errors and responses.", "difficulty": "medium", "topic": "Mobile App Development", "role": "Web Developer"}
{"question": "How do you optimize an Android app for performance?", "answer": "Optimize by: Reducing overdraw (minimize view hierarchy). Using `RecyclerView` for lists. Leveraging `ViewModel` and LiveData for efficient data handling. Avoiding memory leaks (e.g., unregister listeners). Using tools like Android Profiler to identify bottlenecks.", "difficulty": "hard", "topic": "Mobile App Development", "role": "Web Developer"}
{"question": "What is Auto Layout in iOS, and how is it used?", "answer": "Auto Layout defines UI layouts using constraints to adapt to different screen sizes. In UIKit, constraints are set programmatically or via Interface Builder. Example: \nview.addSubview(button)\nbutton.translatesAutoresizingMaskIntoConstraints = false\nNSLayoutConstraint.activate([\n  button.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n  button.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n])\nThis centers a button in the view.", "difficulty": "medium", "topic": "Mobile App Development", "role": "Web Developer"}
{"question": "How do you handle background tasks in Android?", "answer": "Use `WorkManager` for deferrable, guaranteed tasks, `ForegroundService` for ongoing tasks, or `JobScheduler` for older APIs. Example with WorkManager: \nWorkRequest request = new OneTimeWorkRequest.Builder(MyWorker.class).build();\nWorkManager.getInstance(context).enqueue(request);\nThis schedules a background task.", "difficulty": "medium", "topic": "Mobile App Development", "role": "Web Developer"}
{"question": "What are Combine and async/await in Swift, and how do they differ?", "answer": "Combine is Apple’s reactive framework for handling asynchronous events, using publishers and subscribers. Async/await (introduced in Swift 5.5) is a concurrency model for writing asynchronous code synchronously. Combine is suited for complex event streams, while async/await simplifies linear async tasks. Example with async/await: \nfunc fetchData() async throws -> Data {\n  let url = URL(string: \"https://api.example.com\")!\n  let (data, _) = try await URLSession.shared.data(from: url)\n  return data\n}", "difficulty": "hard", "topic": "Mobile App Development", "role": "Web Developer"}
{"question": "How do you secure sensitive data in a mobile app?", "answer": "Secure data by: Using Keychain (iOS) or Keystore (Android) for credentials. Encrypting data with AES or similar. Avoiding hardcoding sensitive info. Using HTTPS for network requests. Implementing secure storage (e.g., `EncryptedSharedPreferences` in Android).", "difficulty": "medium", "topic": "Mobile App Development", "role": "Web Developer"}
{"question": "What is the purpose of the `fetch` API in JavaScript, and how does it differ from `XMLHttpRequest`?", "answer": "The `fetch` API is a modern interface for making HTTP requests, returning a Promise for easier async handling. Unlike `XMLHttpRequest`, it has a simpler syntax, supports streaming, and integrates with modern JavaScript features like async/await. Example: `fetch('https://api.example.com/data').then(response => response.json()).then(data => console.log(data));`. `XMLHttpRequest` is older, more verbose, and lacks Promise support natively.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "Explain the concept of CSS Grid and its advantages over Flexbox.", "answer": "CSS Grid is a two-dimensional layout system for rows and columns, ideal for complex page layouts. Flexbox is one-dimensional, better for linear arrangements. Grid advantages include precise control over row/column placement (e.g., `grid-template-columns: 1fr 2fr;`) and support for overlapping elements. Use Grid for page layouts, Flexbox for components. Example: `display: grid; grid-template-areas: 'header header' 'sidebar main';`.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What are React Hooks, and how do they improve functional components?", "answer": "React Hooks (e.g., `useState`, `useEffect`) are functions that let functional components manage state and lifecycle events, previously limited to class components. They simplify code, improve reusability, and avoid complex class syntax. Example: `const [count, setCount] = useState(0); useEffect(() => { document.title = `Count: ${count}`; }, [count]);`. Hooks reduce boilerplate and enhance readability.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "How do you optimize a website’s performance to reduce load time?", "answer": "Optimize by minifying CSS/JavaScript, compressing images (e.g., WebP format), using lazy loading, enabling browser caching, and reducing HTTP requests via asset bundling. Use a CDN for faster content delivery and implement critical CSS for above-the-fold rendering. Tools like Lighthouse can identify bottlenecks. Example: `<img loading=\"lazy\" src=\"image.webp\" alt=\"example\" />`.", "difficulty": "hard", "topic": "Performance", "role": "Web Developer"}
{"question": "What is HTTP/3, and how does it improve upon HTTP/2?", "answer": "HTTP/3 uses QUIC (over UDP) instead of TCP, reducing latency with faster connection setup and better handling of packet loss. It improves multiplexing, eliminates head-of-line blocking, and enhances security with built-in TLS 1.3. Example benefit: faster page loads on unreliable networks. HTTP/2 uses TCP, which can delay delivery if packets are lost.", "difficulty": "hard", "topic": "Networking", "role": "Web Developer"}
{"question": "What is the purpose of the `aria-label` attribute, and when should it be used?", "answer": "The `aria-label` attribute provides an accessible name for elements lacking visible text, aiding screen readers. Use it for interactive elements like buttons or links without descriptive text. Example: `<button aria-label=\"Close modal\">X</button>`. Avoid overuse; prefer semantic HTML when possible.", "difficulty": "easy", "topic": "Accessibility", "role": "Web Developer"}
{"question": "How does the JavaScript `async`/`await` syntax improve asynchronous code?", "answer": "`async`/`await` makes asynchronous code read like synchronous code, improving readability and error handling. An `async` function returns a Promise, and `await` pauses execution until the Promise resolves. Example: `async function fetchData() { const response = await fetch('api/data'); const data = await response.json(); return data; }`. It’s cleaner than `.then()` chains.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is a Content Delivery Network (CDN), and why is it used?", "answer": "A CDN is a network of distributed servers that cache content closer to users, reducing latency and improving load times. It serves static assets (e.g., images, CSS) and enhances reliability by load balancing. Example: Using Cloudflare to serve `style.css` globally. CDNs also mitigate DDoS attacks.", "difficulty": "easy", "topic": "Networking", "role": "Web Developer"}
{"question": "Explain the difference between `localStorage` and `sessionStorage` in HTML5.", "answer": "`localStorage` stores data without an expiry, persisting across sessions, while `sessionStorage` stores data for a single session, cleared when the tab closes. Both are origin-specific and store key-value pairs. Example: `localStorage.setItem('theme', 'dark'); sessionStorage.setItem('temp', 'data');`. Use `localStorage` for persistent settings, `sessionStorage` for temporary data.", "difficulty": "easy", "topic": "HTML", "role": "Web Developer"}
{"question": "What is the purpose of a CSS preprocessor like Sass, and how does it benefit development?", "answer": "Sass extends CSS with variables, mixins, nesting, and functions, improving maintainability and reducing repetition. Example: `$primary-color: #333; .button { background: $primary-color; }`. It enables modular stylesheets and faster development but requires compilation to CSS.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "How do you handle browser compatibility issues in web development?", "answer": "Use feature detection (e.g., Modernizr), polyfills for unsupported features, and vendor prefixes via tools like Autoprefixer. Test across browsers with tools like BrowserStack, and use progressive enhancement to ensure core functionality works everywhere. Example: `@supports (display: grid) { ... }`.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the difference between `position: relative`, `position: absolute`, and `position: fixed` in CSS?", "answer": "`position: relative` positions an element relative to its normal position, affecting layout flow. `position: absolute` removes the element from the flow, positioning it relative to the nearest positioned ancestor. `position: fixed` positions the element relative to the viewport, staying in place during scrolling. Example: `.fixed-header { position: fixed; top: 0; }`.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is a closure in JavaScript, and how is it used?", "answer": "A closure is a function that retains access to its lexical scope, even when executed outside that scope. It’s useful for data encapsulation and creating private variables. Example: `function counter() { let count = 0; return () => count++; } const increment = counter(); increment(); // 0`. Closures are fundamental for asynchronous code and event handlers.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the event loop in JavaScript, and how does it handle asynchronous operations?", "answer": "The event loop manages the execution of asynchronous code by processing tasks from the callback queue when the call stack is empty. It ensures non-blocking behavior, allowing the main thread to handle user interactions while waiting for async operations like `setTimeout` or API calls. Example: `setTimeout(() => console.log('Delayed'), 1000);` executes after 1 second.", "difficulty": "hard", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the purpose of the `useEffect` hook in React?", "answer": "`useEffect` manages side effects in functional components, such as data fetching, subscriptions, or DOM manipulations. It runs after every render by default but can be configured with dependencies to run conditionally. Example: `useEffect(() => { fetchData(); }, [dependency]);`. Cleanup functions can be returned to handle unmounting.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "How do you implement lazy loading in React?", "answer": "Lazy loading defers component loading until needed, improving initial load times. Use `React.lazy` and `Suspense` for code-splitting. Example: `const LazyComponent = React.lazy(() => import('./Component')); <Suspense fallback={<div>Loading...</div>}><LazyComponent /></Suspense>`. This loads `Component` only when rendered.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the difference between `useState` and `useReducer` in React?", "answer": "`useState` manages simple state with a value and setter, ideal for independent values. `useReducer` handles complex state logic with a reducer function, similar to Redux, useful for interdependent state updates. Example: `const [state, dispatch] = useReducer(reducer, initialState);`. Use `useReducer` for state machines or when actions affect multiple state variables.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the purpose of the `key` prop in React lists?", "answer": "The `key` prop uniquely identifies list items, helping React efficiently update the DOM by tracking which items have changed, been added, or removed. It prevents unnecessary re-renders and maintains component state. Example: `<li key={item.id}>{item.name}</li>`. Use stable, unique identifiers, not indices.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "How do you manage global state in a React application?", "answer": "Global state can be managed with Context API for simple cases or third-party libraries like Redux or MobX for complex applications. Context API provides a way to pass data through the component tree without prop drilling. Example: `const ThemeContext = React.createContext('light'); <ThemeContext.Provider value=\"dark\"><App /></ThemeContext.Provider>`.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the difference between controlled and uncontrolled components in React?", "answer": "Controlled components have their state managed by React, with values passed via props and updates handled by `setState`. Uncontrolled components manage their own state internally, using refs to access values. Example: `<input value={this.state.value} onChange={this.handleChange} />` (controlled), `<input ref={this.inputRef} />` (uncontrolled). Controlled components are preferred for form validation and dynamic updates.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the purpose of the `useMemo` hook in React?", "answer": "`useMemo` memoizes expensive computations, recomputing only when dependencies change, optimizing performance. Example: `const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);`. It prevents unnecessary recalculations on every render.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "How do you handle forms in React?", "answer": "Forms can be handled with controlled components, where form data is stored in state and updated via event handlers. Use `onChange` to capture input changes and `onSubmit` for form submission. Example: `<form onSubmit={handleSubmit}><input value={name} onChange={e => setName(e.target.value)} /></form>`. For complex forms, consider libraries like Formik or React Hook Form.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the difference between `useEffect` and `useLayoutEffect` in React?", "answer": "`useEffect` runs asynchronously after the DOM updates, suitable for most side effects. `useLayoutEffect` runs synchronously after all DOM mutations, before the browser paints, useful for measurements or DOM reads. Example: `useLayoutEffect(() => { const height = ref.current.clientHeight; }, []);`. Use `useEffect` unless you need to read layout before painting.", "difficulty": "hard", "topic": "React", "role": "Web Developer"}
{"question": "What is the purpose of the `useCallback` hook in React?", "answer": "`useCallback` memoizes callback functions, preventing unnecessary re-renders in child components that rely on reference equality. Example: `const memoizedCallback = useCallback(() => { doSomething(a, b); }, [a, b]);`. It’s useful for optimizing performance in components with heavy computations or when passing callbacks to optimized child components.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "How do you implement server-side rendering (SSR) in React?", "answer": "SSR involves rendering React components on the server and sending the HTML to the client. Use frameworks like Next.js or Gatsby, which handle SSR out of the box. Example in Next.js: `export async function getServerSideProps() { const data = await fetchData(); return { props: { data } }; }`. SSR improves SEO and initial load times.", "difficulty": "hard", "topic": "React", "role": "Web Developer"}
{"question": "What is the purpose of the `useRef` hook in React?", "answer": "`useRef` creates a mutable reference that persists across renders, useful for accessing DOM elements or storing values without triggering re-renders. Example: `const inputRef = useRef(null); <input ref={inputRef} />; inputRef.current.focus();`. It’s also used for storing previous state values or timers.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "How do you handle authentication in a React application?", "answer": "Authentication can be handled with JWT tokens, OAuth, or session-based auth. Store tokens in `localStorage` or cookies, and use context or Redux to manage auth state. Example: `const [token, setToken] = useState(localStorage.getItem('token'));`. Protect routes with higher-order components or hooks like `useAuth`.", "difficulty": "hard", "topic": "React", "role": "Web Developer"}
{"question": "How do you implement code splitting in React?", "answer": "Code splitting divides the app into smaller bundles, loading them on demand. Use `React.lazy` and `Suspense` for dynamic imports. Example: `const LazyComponent = React.lazy(() => import('./Component')); <Suspense fallback={<div>Loading...</div>}><LazyComponent /></Suspense>`. This improves initial load times by loading only necessary code.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the purpose of the `useContext` hook in React?", "answer": "`useContext` accesses context values without nesting consumers, simplifying code. Example: `const theme = useContext(ThemeContext);`. It’s useful for global state like themes or user data, reducing prop drilling.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "How do you handle errors in React components?", "answer": "Use error boundaries to catch and handle errors in child components. Define a component with `componentDidCatch` or `static getDerivedStateFromError`. Example: `class ErrorBoundary extends React.Component { componentDidCatch(error, info) { logError(error, info); } render() { return this.props.children; } }`. For functional components, use libraries like `react-error-boundary`.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "How do you implement internationalization (i18n) in a React application?", "answer": "Use libraries like `react-i18next` or `react-intl` to manage translations. Define translation files for each language and wrap the app with a provider. Example: `import { I18nextProvider } from 'react-i18next'; <I18nextProvider i18n={i18n}><App /></I18nextProvider>`. This allows dynamic language switching and localized content.", "difficulty": "hard", "topic": "React", "role": "Web Developer"}
{"question": "What is the purpose of the `useImperativeHandle` hook in React?", "answer": "`useImperativeHandle` customizes the instance value exposed when using `ref` in a functional component, allowing parent components to call child methods. Example: `useImperativeHandle(ref, () => ({ focus: () => inputRef.current.focus() }));`. It’s useful for exposing specific methods while hiding others.", "difficulty": "hard", "topic": "React", "role": "Web Developer"}
{"question": "How do you implement a custom hook in React?", "answer": "Custom hooks are functions that use other hooks to encapsulate reusable logic. Example: `function useFetch(url) { const [data, setData] = useState(null); useEffect(() => { fetch(url).then(res => res.json()).then(setData); }, [url]); return data; }`. This abstracts data fetching logic for reuse across components.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the difference between `useState` and `useRef` in React?", "answer": "`useState` triggers re-renders when state changes, while `useRef` provides a mutable reference that doesn’t cause re-renders. `useRef` is ideal for storing values that don’t affect the UI, like timers or DOM references. Example: `const count = useRef(0); count.current++;` vs. `const [count, setCount] = useState(0); setCount(count + 1);`.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the Shadow DOM, and how does it benefit web development?", "answer": "The Shadow DOM is a browser technology that encapsulates a DOM subtree, isolating its styles and structure from the main document. It’s useful for creating reusable components (e.g., custom elements) without style conflicts. Example: `element.attachShadow({ mode: 'open' })`. It benefits web development by improving modularity and preventing CSS leakage.", "difficulty": "medium", "topic": "HTML", "role": "Web Developer"}
{"question": "How do you create a custom HTML element using Web Components?", "answer": "Use the Custom Elements API to define a custom HTML element. Example: `class MyElement extends HTMLElement { connectedCallback() { this.innerHTML = 'Hello!'; } } customElements.define('my-element', MyElement);`. Use it as `<my-element></my-element>`. It allows reusable, encapsulated components.", "difficulty": "medium", "topic": "HTML", "role": "Web Developer"}
{"question": "What is the purpose of the `<picture>` element in HTML?", "answer": "The `<picture>` element provides multiple image sources for different screen sizes or formats, improving responsiveness and performance. Example: `<picture><source srcset=\"image.webp\" type=\"image/webp\"><img src=\"image.jpg\" alt=\"example\"></picture>`. It ensures the best image is loaded based on browser support or device.", "difficulty": "easy", "topic": "HTML", "role": "Web Developer"}
{"question": "What are CSS custom properties, and how are they used?", "answer": "CSS custom properties (variables) store reusable values, defined with `--name` and accessed with `var()`. Example: `:root { --primary: #333; } .button { background: var(--primary); }`. They’re dynamic, scoped, and can be updated via JavaScript, enhancing maintainability.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "How do you implement a sticky footer using CSS?", "answer": "Use Flexbox or Grid to ensure the footer stays at the bottom. Flexbox example: `body { display: flex; flex-direction: column; min-height: 100vh; } main { flex: 1; } footer { flex-shrink: 0; }`. This ensures the footer sticks to the bottom even with short content.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the `z-index` property in CSS, and how does it work?", "answer": "The `z-index` property controls the stacking order of positioned elements (e.g., `position: absolute`). Higher values stack above lower ones. Example: `.overlay { position: absolute; z-index: 10; }`. It only works on positioned elements and within the same stacking context.", "difficulty": "easy", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the purpose of the `calc()` function in CSS?", "answer": "The `calc()` function performs calculations with mixed units (e.g., `px`, `%`, `em`). Example: `width: calc(100% - 20px);`. It’s useful for responsive layouts and dynamic sizing, supported across modern browsers.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "How do you create a CSS animation?", "answer": "Use `@keyframes` to define animation stages and apply it with the `animation` property. Example: `@keyframes slide { from { transform: translateX(0); } to { transform: translateX(100px); } } .box { animation: slide 2s infinite; }`. This moves an element 100px over 2 seconds, repeating infinitely.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the difference between `display: none` and `visibility: hidden` in CSS?", "answer": "`display: none` removes the element from the layout entirely, taking no space, while `visibility: hidden` hides it but preserves its space. Example: `.hidden { visibility: hidden; }` vs. `.gone { display: none; }`. Use `display: none` for layout changes, `visibility: hidden` for toggling visibility.", "difficulty": "easy", "topic": "CSS", "role": "Web Developer"}
{"question": "What are JavaScript generators, and how do they work?", "answer": "Generators are functions that can pause and resume execution, yielding values with `yield`. Example: `function* gen() { yield 1; yield 2; } const iterator = gen(); console.log(iterator.next().value); // 1`. They’re useful for lazy evaluation and handling asynchronous flows with libraries like `co`.", "difficulty": "hard", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How do you debounce a function in JavaScript?", "answer": "Debouncing limits function calls by delaying execution until after a set time. Example: `function debounce(fn, delay) { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => fn(...args), delay); }; }`. Use it for events like window resizing: `window.onresize = debounce(handleResize, 200);`.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the purpose of the `WeakMap` in JavaScript?", "answer": "A `WeakMap` holds weak references to keys (objects), allowing garbage collection if no other references exist. Example: `const wm = new WeakMap(); let obj = {}; wm.set(obj, 'data'); obj = null; // 'data' can be garbage collected`. It’s useful for caching or private data without memory leaks.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is tree shaking in JavaScript, and how does it improve performance?", "answer": "Tree shaking eliminates unused code from bundles during build time, supported by tools like Webpack or Rollup. Example: `import { used } from 'module';` only includes `used`, not the entire module. It reduces bundle size, improving load times and runtime efficiency.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How do you implement a throttle function in JavaScript?", "answer": "Throttling limits function calls to once per interval. Example: `function throttle(fn, limit) { let lastCall; return (...args) => { const now = Date.now(); if (!lastCall || now - lastCall >= limit) { fn(...args); lastCall = now; } }; }`. Use it for scroll events: `window.onscroll = throttle(handleScroll, 100);`.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the purpose of the `IntersectionObserver` API?", "answer": "The `IntersectionObserver` API detects when an element enters or exits the viewport, useful for lazy loading or infinite scrolling. Example: `const observer = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) loadImage(); }); }); observer.observe(img);`. It’s more efficient than scroll listeners.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is a Service Worker, and how does it enhance web applications?", "answer": "A Service Worker is a script running in the background, intercepting network requests and caching resources. Example: `self.addEventListener('fetch', event => { event.respondWith(caches.match(event.request)); });`. It enables offline functionality, push notifications, and faster load times.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How do you secure a REST API?", "answer": "Secure a REST API with HTTPS, authentication (e.g., OAuth, JWT), rate limiting, input validation, and CORS policies. Example: Use JWT for auth: `Authorization: Bearer <token>`. Avoid exposing sensitive data in URLs and use environment variables for secrets.", "difficulty": "hard", "topic": "Security", "role": "Web Developer"}
{"question": "What is CSRF, and how do you prevent it?", "answer": "Cross-Site Request Forgery (CSRF) tricks users into submitting malicious requests to a site they’re authenticated on. Prevent it with CSRF tokens: `<input type=\"hidden\" name=\"csrf_token\" value=\"random_token\">`, validated server-side. Use SameSite cookies to restrict cross-origin requests.", "difficulty": "medium", "topic": "Security", "role": "Web Developer"}
{"question": "What is the purpose of the `SameSite` attribute on cookies?", "answer": "The `SameSite` attribute (e.g., `Strict`, `Lax`, `None`) controls whether cookies are sent with cross-site requests, mitigating CSRF. Example: `Set-Cookie: key=value; SameSite=Strict`. `Strict` blocks all cross-site usage, while `Lax` allows safe methods like GET.", "difficulty": "medium", "topic": "Security", "role": "Web Developer"}
{"question": "How do you implement a progress bar for file uploads in JavaScript?", "answer": "Use the `XMLHttpRequest` or `fetch` with progress events. Example: `const xhr = new XMLHttpRequest(); xhr.upload.onprogress = (e) => { const percent = (e.loaded / e.total) * 100; progressBar.style.width = percent + '%'; }; xhr.open('POST', '/upload'); xhr.send(formData);`. This updates the UI as the upload progresses.", "difficulty": "hard", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the purpose of the `rel=\"noreferrer\"` attribute on links?", "answer": "The `rel=\"noreferrer\"` attribute prevents the browser from sending the HTTP referrer header when clicking a link, enhancing privacy. Example: `<a href=\"https://example.com\" rel=\"noreferrer\">Link</a>`. It’s often used with `target=\"_blank\"` alongside `noopener`.", "difficulty": "easy", "topic": "HTML", "role": "Web Developer"}
{"question": "How do you implement a dark mode toggle using CSS and JavaScript?", "answer": "Use CSS custom properties and toggle them with JavaScript. CSS: `:root { --bg: #fff; --text: #000; } .dark { --bg: #000; --text: #fff; } body { background: var(--bg); color: var(--text); }`. JS: `button.addEventListener('click', () => document.body.classList.toggle('dark'));`. This switches themes dynamically.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the purpose of the `contenteditable` attribute in HTML?", "answer": "The `contenteditable` attribute makes an element editable by the user. Example: `<div contenteditable=\"true\">Edit me</div>`. It’s useful for rich text editors or inline editing, but requires JavaScript for saving changes.", "difficulty": "easy", "topic": "HTML", "role": "Web Developer"}
{"question": "How do you optimize images for the web?", "answer": "Optimize images by compressing them (e.g., using tools like TinyPNG), using modern formats (WebP, AVIF), setting appropriate dimensions, and enabling lazy loading (`<img loading=\"lazy\">`). Serve responsive images with `<picture>` or `srcset`. This reduces load times and bandwidth usage.", "difficulty": "medium", "topic": "Performance", "role": "Web Developer"}
{"question": "What is the difference between `requestAnimationFrame` and `setTimeout` in JavaScript?", "answer": "`requestAnimationFrame` schedules a function to run before the next repaint, syncing with the browser’s refresh rate (e.g., 60fps), ideal for animations. `setTimeout` runs after a fixed delay, less precise for animations. Example: `requestAnimationFrame(animate);` vs. `setTimeout(animate, 16);`.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How do you handle responsive typography in CSS?", "answer": "Use relative units (`vw`, `rem`, `em`) and media queries. Example: `h1 { font-size: clamp(1.5rem, 4vw, 3rem); } @media (min-width: 768px) { h1 { font-size: 2.5rem; } }`. `clamp()` ensures scalability within bounds, improving readability across devices.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the purpose of the `data-` attribute in HTML?", "answer": "The `data-` attribute stores custom data on elements, accessible via JavaScript. Example: `<div data-id=\"123\">Content</div>` with `element.dataset.id // '123'`. It’s useful for attaching metadata without affecting semantics or styling.", "difficulty": "easy", "topic": "HTML", "role": "Web Developer"}
{"question": "How do you implement a carousel using CSS and JavaScript?", "answer": "Use CSS for layout and transitions, JavaScript for navigation. CSS: `.carousel { display: flex; overflow: hidden; } .slide { transition: transform 0.5s; }`. JS: `let index = 0; function next() { index++; slides.style.transform = `translateX(-${index * 100}%)`; }`. This shifts slides horizontally with smooth transitions.", "difficulty": "hard", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the purpose of the `nonce` attribute in HTML?", "answer": "The `nonce` attribute allows specific inline scripts or styles to bypass Content Security Policy (CSP) restrictions. Example: `<script nonce=\"random123\">...</script>` with CSP: `script-src 'nonce-random123'`. It enhances security by whitelisting trusted code.", "difficulty": "medium", "topic": "Security", "role": "Web Developer"}
{"question": "How do you use the `matchMedia` API in JavaScript?", "answer": "The `matchMedia` API tests CSS media queries in JavaScript. Example: `const mq = window.matchMedia('(min-width: 768px)'); mq.addEventListener('change', (e) => { if (e.matches) console.log('Desktop'); });`. It’s useful for responsive behavior without relying solely on CSS.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the difference between `sessionStorage` and cookies?", "answer": "`sessionStorage` stores data for a single session (tab), cleared on close, while cookies persist across sessions and can have expiration dates. Cookies are sent with HTTP requests, while `sessionStorage` is client-only. Example: `sessionStorage.setItem('key', 'value');` vs. `document.cookie = 'key=value; max-age=3600';`.", "difficulty": "medium", "topic": "HTML", "role": "Web Developer"}
{"question": "How do you implement a sticky navigation bar using CSS?", "answer": "Use `position: sticky`. Example: `nav { position: sticky; top: 0; background: #fff; z-index: 100; }`. This keeps the nav bar at the top of the viewport while scrolling, within its parent container.", "difficulty": "easy", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the purpose of the `prefers-reduced-motion` media query?", "answer": "The `prefers-reduced-motion` media query detects if a user prefers reduced animations, improving accessibility. Example: `@media (prefers-reduced-motion: reduce) { .animate { animation: none; } }`. It respects user settings for motion sensitivity.", "difficulty": "medium", "topic": "Accessibility", "role": "Web Developer"}
{"question": "How do you create a modal dialog using React?", "answer": "Use a component with conditional rendering and CSS for styling. Example: `function Modal({ isOpen, onClose, children }) { if (!isOpen) return null; return <div className=\"modal\"><div className=\"content\">{children}<button onClick={onClose}>Close</button></div></div>; }` with CSS: `.modal { position: fixed; inset: 0; background: rgba(0,0,0,0.5); } .content { background: white; margin: auto; }`.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the purpose of the `role` attribute in HTML?", "answer": "The `role` attribute defines an element’s purpose for accessibility, enhancing screen reader support. Example: `<div role=\"alert\">Error!</div>`. It’s part of ARIA, used when native HTML semantics are insufficient.", "difficulty": "easy", "topic": "Accessibility", "role": "Web Developer"}
{"question": "How do you implement a simple routing system in a React app without a library?", "answer": "Use state to manage routes and conditionally render components. Example: `function App() { const [route, setRoute] = useState('home'); return <><nav><button onClick={() => setRoute('home')}>Home</button><button onClick={() => setRoute('about')}>About</button></nav>{route === 'home' ? <Home /> : <About />}</>; }`. This mimics basic routing behavior.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the purpose of the `fetch` API’s `AbortController`?", "answer": "The `AbortController` cancels a `fetch` request. Example: `const controller = new AbortController(); fetch(url, { signal: controller.signal }).catch(err => console.log(err.name)); controller.abort(); // Aborts the request`. It’s useful for timeouts or user-initiated cancellations.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How do you implement a drag-and-drop feature in HTML5?", "answer": "Use HTML5 drag-and-drop APIs. Example: `<div draggable=\"true\" ondragstart=\"e.dataTransfer.setData('text', e.target.id)\">Drag me</div><div ondrop=\"e.dataTransfer.getData('text')\" ondragover=\"e.preventDefault()\">Drop here</div>`. This enables dragging elements between zones.", "difficulty": "hard", "topic": "HTML", "role": "Web Developer"}
{"question": "What is the purpose of the `crypto` API in JavaScript?", "answer": "The `crypto` API provides cryptographic functions like random number generation and hashing. Example: `crypto.getRandomValues(new Uint32Array(1))` generates secure random numbers. It’s useful for security features like generating tokens or nonces.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How do you implement a tooltip using CSS?", "answer": "Use the `:hover` pseudo-class and positioning. Example: `.tooltip { position: relative; } .tooltip:hover::after { content: 'Tooltip'; position: absolute; top: -20px; background: #333; color: white; padding: 5px; }`. This shows a tooltip on hover without JavaScript.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the purpose of the `srcset` attribute on images?", "answer": "The `srcset` attribute provides multiple image sources for different device pixel ratios or widths. Example: `<img src=\"low.jpg\" srcset=\"high.jpg 2x, med.jpg 1.5x\" alt=\"example\">`. It ensures the browser loads the best image for the display, improving performance and quality.", "difficulty": "medium", "topic": "HTML", "role": "Web Developer"}
{"question": "How do you implement a breadcrumb navigation using React?", "answer": "Use an array of links and map them to components. Example: `function Breadcrumbs({ paths }) { return <nav>{paths.map((path, i) => <span key={i}>{i > 0 && ' > '}<a href={path.url}>{path.name}</a></span>)}</nav>; }`. Usage: `<Breadcrumbs paths={[{name: 'Home', url: '/'}, {name: 'Page', url: '/page'}]} />`.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the difference between `noopener` and `noreferrer` in the `rel` attribute?", "answer": "`noopener` prevents the new window from accessing `window.opener`, enhancing security. `noreferrer` additionally blocks the referrer header, enhancing privacy. Example: `<a href=\"https://example.com\" rel=\"noopener noreferrer\" target=\"_blank\">Link</a>`. Use both for external links.", "difficulty": "medium", "topic": "HTML", "role": "Web Developer"}
{"question": "How do you implement a simple search filter in React?", "answer": "Use state to filter an array. Example: `function SearchList({ items }) { const [query, setQuery] = useState(''); const filtered = items.filter(item => item.toLowerCase().includes(query.toLowerCase())); return <><input value={query} onChange={e => setQuery(e.target.value)} /><ul>{filtered.map(item => <li key={item}>{item}</li>)}</ul></>; }`. This filters items dynamically.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the purpose of the `lang` attribute in HTML?", "answer": "The `lang` attribute specifies the language of an element’s content, aiding accessibility and SEO. Example: `<html lang=\"en\">`. It helps screen readers pronounce text correctly and search engines index content.", "difficulty": "easy", "topic": "HTML", "role": "Web Developer"}
{"question": "How do you implement a CSS-only accordion?", "answer": "Use the `:checked` pseudo-class with a hidden checkbox. Example: `<input type=\"checkbox\" id=\"toggle\"><label for=\"toggle\">Toggle</label><div class=\"content\">Content</div>` with CSS: `.content { max-height: 0; overflow: hidden; transition: max-height 0.3s; } #toggle:checked ~ .content { max-height: 200px; }`. This toggles content visibility.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the purpose of the `history` API in JavaScript?", "answer": "The `history` API manipulates browser history without page reloads. Example: `history.pushState({ page: 1 }, 'Page 1', '/page1');` adds a new entry. It’s useful for single-page apps to manage navigation and URLs.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How do you implement a pagination component in React?", "answer": "Use state to track the current page and slice data. Example: `function Pagination({ data, perPage }) { const [page, setPage] = useState(1); const total = Math.ceil(data.length / perPage); const paginated = data.slice((page - 1) * perPage, page * perPage); return <><ul>{paginated.map(item => <li key={item}>{item}</li>)}</ul><button onClick={() => setPage(p => p - 1)} disabled={page === 1}>Prev</button><button onClick={() => setPage(p => p + 1)} disabled={page === total}>Next</button></>; }`.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the purpose of the `clip-path` property in CSS?", "answer": "The `clip-path` property clips an element to a shape or path. Example: `.circle { clip-path: circle(50% at 50% 50%); }`. It’s useful for creative designs like circular images or custom shapes, with broad browser support.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "How do you implement a simple state machine in JavaScript?", "answer": "Use an object to define states and transitions. Example: `const machine = { state: 'idle', transitions: { idle: { start: 'running' }, running: { stop: 'idle' } }, transition(event) { this.state = this.transitions[this.state][event] || this.state; } }; machine.transition('start'); // 'running'`. This manages state changes predictably.", "difficulty": "hard", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the purpose of the `loading` attribute on images?", "answer": "The `loading` attribute enables native lazy loading. Example: `<img src=\"image.jpg\" loading=\"lazy\" alt=\"example\">`. It defers loading until the image is near the viewport, improving initial page load performance.", "difficulty": "easy", "topic": "HTML", "role": "Web Developer"}
{"question": "How do you implement a CSS grid layout with a sidebar and main content?", "answer": "Use `grid-template-areas`. Example: `.container { display: grid; grid-template-areas: 'sidebar main'; grid-template-columns: 1fr 3fr; } .sidebar { grid-area: sidebar; } .main { grid-area: main; }`. This creates a responsive layout with a fixed sidebar and flexible main area.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the purpose of the `navigator` object in JavaScript?", "answer": "The `navigator` object provides browser and system information. Example: `navigator.userAgent` returns the browser’s user agent string. It’s useful for feature detection (e.g., `navigator.geolocation`) or tailoring experiences to devices.", "difficulty": "easy", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How do you implement a tabbed interface using React?", "answer": "Use state to track the active tab. Example: `function Tabs({ tabs }) { const [active, setActive] = useState(0); return <><div>{tabs.map((tab, i) => <button key={i} onClick={() => setActive(i)}>{tab.label}</button>)}</div><div>{tabs[active].content}</div></>; }`. Usage: `<Tabs tabs={[{label: 'Tab1', content: 'Content1'}, {label: 'Tab2', content: 'Content2'}]} />`.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the purpose of the `preload` link relation in HTML?", "answer": "The `rel=\"preload\"` link hints to the browser to fetch resources early. Example: `<link rel=\"preload\" href=\"style.css\" as=\"style\">`. It improves performance by prioritizing critical assets like styles or scripts.", "difficulty": "medium", "topic": "HTML", "role": "Web Developer"}
{"question": "How do you implement a smooth scroll behavior using CSS?", "answer": "Use the `scroll-behavior` property. Example: `html { scroll-behavior: smooth; }` with `<a href=\"#section\">Go</a><div id=\"section\">Content</div>`. This animates scrolling to anchors without JavaScript.", "difficulty": "easy", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the purpose of the `Proxy` object in JavaScript?", "answer": "The `Proxy` object wraps an object to intercept and customize operations like property access. Example: `const target = {}; const proxy = new Proxy(target, { get: (obj, prop) => prop in obj ? obj[prop] : 'default' }); console.log(proxy.foo); // 'default'`. It’s useful for validation, logging, or defaults.", "difficulty": "hard", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How do you implement a collapsible sidebar using CSS and JavaScript?", "answer": "Use CSS for styling and JavaScript for toggling. CSS: `.sidebar { width: 250px; transition: width 0.3s; } .collapsed { width: 0; }`. JS: `button.addEventListener('click', () => sidebar.classList.toggle('collapsed'));`. This animates the sidebar’s width.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the purpose of the `inert` attribute in HTML?", "answer": "The `inert` attribute makes an element and its subtree non-interactive and non-focusable. Example: `<div inert>Content</div>`. It’s useful for disabling sections (e.g., modals) but is still experimental with limited support.", "difficulty": "medium", "topic": "HTML", "role": "Web Developer"}
{"question": "How do you implement a simple autocomplete feature in JavaScript?", "answer": "Use an input and filter suggestions. Example: `input.addEventListener('input', (e) => { const matches = suggestions.filter(s => s.startsWith(e.target.value)); list.innerHTML = matches.map(m => `<li>${m}</li>`).join(''); });`. This updates a list based on user input.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the purpose of the `aspect-ratio` property in CSS?", "answer": "The `aspect-ratio` property sets an element’s width-to-height ratio. Example: `.video { aspect-ratio: 16 / 9; width: 100%; }`. It’s useful for responsive media or placeholders, ensuring consistent proportions.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "How do you implement a loading spinner using CSS?", "answer": "Use keyframes for a spinning effect. Example: `.spinner { width: 40px; height: 40px; border: 4px solid #ccc; border-top-color: #333; border-radius: 50%; animation: spin 1s infinite linear; } @keyframes spin { to { transform: rotate(360deg); } }`. This creates a rotating circle.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the purpose of the `performance` API in JavaScript?", "answer": "The `performance` API measures timing metrics. Example: `console.log(performance.now());` returns milliseconds since page load. It’s useful for benchmarking, tracking load times (`performance.timing`), or optimizing performance.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How do you implement a responsive navbar with a hamburger menu?", "answer": "Use CSS media queries and JavaScript. CSS: `.menu { display: flex; } @media (max-width: 768px) { .menu { display: none; } .menu.active { display: block; } }`. JS: `hamburger.addEventListener('click', () => menu.classList.toggle('active'));`. This toggles the menu on small screens.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the purpose of the `referrerpolicy` attribute in HTML?", "answer": "The `referrerpolicy` attribute controls the referrer header sent with requests. Example: `<a href=\"https://example.com\" referrerpolicy=\"no-referrer\">Link</a>`. Options like `no-referrer` or `origin` enhance privacy by limiting referrer info.", "difficulty": "medium", "topic": "HTML", "role": "Web Developer"}
{"question": "How do you implement a simple form validation in React?", "answer": "Use state and event handlers. Example: `function Form() { const [value, setValue] = useState(''); const [error, setError] = useState(''); const handleSubmit = (e) => { e.preventDefault(); if (!value) setError('Required'); else setError(''); }; return <form onSubmit={handleSubmit}><input value={value} onChange={e => setValue(e.target.value)} /><span>{error}</span><button>Submit</button></form>; }`.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the purpose of the `subgrid` value in CSS Grid?", "answer": "The `grid-template-columns: subgrid` inherits the parent grid’s column tracks, aligning nested grids. Example: `.parent { display: grid; grid-template-columns: 1fr 2fr; } .child { display: grid; grid-template-columns: subgrid; }`. It’s useful for consistent layouts in nested structures.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "How do you implement a countdown timer in JavaScript?", "answer": "Use `setInterval` to update time. Example: `function startTimer(seconds) { let time = seconds; const timer = setInterval(() => { if (time <= 0) clearInterval(timer); console.log(time--); }, 1000); } startTimer(10);`. This counts down from 10 seconds.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "What is the purpose of the `download` attribute in HTML?", "answer": "The `download` attribute prompts the browser to download a file instead of navigating to it. Example: `<a href=\"file.pdf\" download=\"document.pdf\">Download</a>`. It’s useful for forcing downloads of resources like PDFs or images.", "difficulty": "easy", "topic": "HTML", "role": "Web Developer"}
{"question": "How do you implement a parallax scrolling effect using CSS?", "answer": "Use `background-attachment: fixed`. Example: `.parallax { background-image: url('image.jpg'); background-attachment: fixed; background-size: cover; height: 100vh; }`. This keeps the background static while content scrolls, creating a parallax effect.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the purpose of the `WebSocket` API in JavaScript?", "answer": "The `WebSocket` API enables real-time, bidirectional communication between client and server. Example: `const ws = new WebSocket('ws://example.com'); ws.onmessage = (e) => console.log(e.data);`. It’s useful for chat apps, live updates, or gaming.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How do you implement a simple toggle switch using CSS and JavaScript?", "answer": "Use a checkbox with styled label. CSS: `.switch { position: relative; } .switch input { display: none; } .switch label { width: 40px; height: 20px; background: #ccc; border-radius: 20px; } .switch input:checked + label { background: #333; }`. JS: `input.addEventListener('change', (e) => console.log(e.target.checked));`.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the purpose of the `accept` attribute on file inputs?", "answer": "The `accept` attribute filters file types for `<input type=\"file\">`. Example: `<input type=\"file\" accept=\"image/*\">` allows only images. It improves UX by limiting user selection to valid formats.", "difficulty": "easy", "topic": "HTML", "role": "Web Developer"}
{"question": "How do you implement a responsive table using CSS?", "answer": "Use `display: block` and `overflow-x: auto` for small screens. Example: `table { width: 100%; } @media (max-width: 600px) { .table-wrapper { overflow-x: auto; } table { display: block; } th, td { display: block; width: 100%; } }`. This makes tables scrollable or stacked.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the purpose of the `MutationObserver` API in JavaScript?", "answer": "The `MutationObserver` API watches for DOM changes. Example: `const observer = new MutationObserver((mutations) => console.log(mutations)); observer.observe(document.body, { childList: true, subtree: true });`. It’s useful for reacting to dynamic content updates without polling.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How do you implement a simple React context for theming?", "answer": "Create a context and provider. Example: `const ThemeContext = React.createContext('light'); function App() { const [theme, setTheme] = useState('light'); return <ThemeContext.Provider value={{ theme, setTheme }}><Child /></ThemeContext.Provider>; } function Child() { const { theme, setTheme } = useContext(ThemeContext); return <button onClick={() => setTheme('dark')}>{theme}</button>; }`.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the purpose of the `sandbox` attribute on iframes?", "answer": "The `sandbox` attribute restricts iframe content for security. Example: `<iframe src=\"page.html\" sandbox=\"allow-scripts\"></iframe>`. Values like `allow-scripts` or `allow-forms` enable specific features, while the default blocks most actions.", "difficulty": "medium", "topic": "HTML", "role": "Web Developer"}
{"question": "How do you implement a CSS-only dropdown menu?", "answer": "Use `:hover` with nested elements. Example: `.dropdown { position: relative; } .dropdown-content { display: none; position: absolute; } .dropdown:hover .dropdown-content { display: block; }`. HTML: `<div class=\"dropdown\">Menu<div class=\"dropdown-content\">Items</div></div>`.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the purpose of the `Promise.all` method in JavaScript?", "answer": "`Promise.all` resolves when all promises in an iterable resolve, or rejects on the first rejection. Example: `Promise.all([fetch('url1'), fetch('url2')]).then(responses => console.log(responses));`. It’s useful for parallel async operations.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How do you implement a simple React form with validation?", "answer": "Use state for form data and errors. Example: `function Form() { const [form, setForm] = useState({ name: '' }); const [errors, setErrors] = useState({}); const handleSubmit = (e) => { e.preventDefault(); if (!form.name) setErrors({ name: 'Required' }); else console.log(form); }; return <form onSubmit={handleSubmit}><input value={form.name} onChange={e => setForm({ name: e.target.value })} /><span>{errors.name}</span><button>Submit</button></form>; }`.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the purpose of the `details` and `summary` elements in HTML?", "answer": "The `<details>` element creates a collapsible section, with `<summary>` as its visible header. Example: `<details><summary>Click me</summary><p>Content</p></details>`. It provides native accordion functionality without JavaScript.", "difficulty": "easy", "topic": "HTML", "role": "Web Developer"}
{"question": "How do you implement a CSS gradient background?", "answer": "Use the `linear-gradient` function. Example: `background: linear-gradient(to right, #ff0000, #00ff00);`. This creates a gradient from red to green horizontally. Radial gradients (`radial-gradient`) are also available.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the purpose of the `Array.from` method in JavaScript?", "answer": "`Array.from` creates an array from an iterable or array-like object. Example: `Array.from('abc'); // ['a', 'b', 'c']` or `Array.from({ length: 3 }, (_, i) => i); // [0, 1, 2]`. It’s useful for converting collections or generating arrays.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How do you implement a simple React hook for window size?", "answer": "Create a custom hook with `useState` and `useEffect`. Example: `function useWindowSize() { const [size, setSize] = useState({ width: window.innerWidth, 🙂height: window.innerHeight }); useEffect(() => { const handleResize = () => setSize({ width: window.innerWidth, height: window.innerHeight }); window.addEventListener('resize', handleResize); return () => window.removeEventListener('resize', handleResize); }, []); return size; }`. Usage: `const { width } = useWindowSize();`.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the purpose of the `figure` and `figcaption` elements in HTML?", "answer": "The `<figure>` element groups self-contained content (e.g., images, diagrams), with `<figcaption>` providing its caption. Example: `<figure><img src=\"image.jpg\" alt=\"example\"><figcaption>Caption</figcaption></figure>`. It improves semantics and accessibility.", "difficulty": "easy", "topic": "HTML", "role": "Web Developer"}
{"question": "How do you implement a CSS-only image hover effect?", "answer": "Use `:hover` with transitions. Example: `.image { transition: transform 0.3s; } .image:hover { transform: scale(1.1); }`. This scales the image up smoothly on hover.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the purpose of the `Object.freeze` method in JavaScript?", "answer": "`Object.freeze` prevents modifications to an object’s properties. Example: `const obj = Object.freeze({ a: 1 }); obj.a = 2; // Fails silently`. It’s useful for creating immutable data structures, though it’s shallow (nested objects can still change).", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How do you implement a simple React component for a progress bar?", "answer": "Use props and CSS. Example: `function ProgressBar({ progress }) { return <div className=\"bar\"><div className=\"fill\" style={{ width: `${progress}%` }}></div></div>; }` with CSS: `.bar { width: 100%; height: 20px; background: #ccc; } .fill { height: 100%; background: #333; }`. Usage: `<ProgressBar progress={75} />`.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}
{"question": "What is the purpose of the `mark` element in HTML?", "answer": "The `<mark>` element highlights text for reference or emphasis. Example: `<p>Search <mark>term</mark> here</p>`. It’s styled with a yellow background by default and useful for search results or annotations.", "difficulty": "easy", "topic": "HTML", "role": "Web Developer"}
{"question": "How do you implement a CSS flexbox layout with equal-height columns?", "answer": "Use `display: flex` and `flex: 1`. Example: `.container { display: flex; } .column { flex: 1; }`. HTML: `<div class=\"container\"><div class=\"column\">A</div><div class=\"column\">B</div></div>`. This ensures columns stretch to the tallest one’s height.", "difficulty": "medium", "topic": "CSS", "role": "Web Developer"}
{"question": "What is the purpose of the `Set` object in JavaScript?", "answer": "The `Set` object stores unique values of any type. Example: `const set = new Set([1, 1, 2]); console.log([...set]); // [1, 2]`. It’s useful for deduplication or membership testing with `has()`.", "difficulty": "medium", "topic": "JavaScript", "role": "Web Developer"}
{"question": "How do you implement a simple React hook for local storage?", "answer": "Create a custom hook with `useState` and `useEffect`. Example: `function useLocalStorage(key, initialValue) { const [value, setValue] = useState(() => localStorage.getItem(key) || initialValue); useEffect(() => { localStorage.setItem(key, value); }, [key, value]); return [value, setValue]; }`. Usage: `const [name, setName] = useLocalStorage('name', '');`.", "difficulty": "medium", "topic": "React", "role": "Web Developer"}